<?xml version="1.0" encoding="UTF-8"?>
 <chapter id="fdwhandler">
   <title>Écrire un wrapper de données distantes</title>

   <indexterm zone="fdwhandler">
    <primary>wrapper de données distantes</primary>
    <secondary>gestionnaire</secondary>
   </indexterm>

   <para>
    Toutes les opérations sur une table distante sont gérées via un
    wrapper de données distantes. Ce dernier est un ensemble de fonctions
    que PostgreSQL appelle. Le wrapper de données
    distantes est responsable de la récupération des données à partir de
    le source de données distante et de leur renvoi à l'exécuteur
    <productname>PostgreSQL</productname>. Ce chapitre indique comment
    écrire un nouveau wrapper de données distantes.
   </para>

   <para>
    Les wrappers de données distantes incluent dans la distribution
    standard sont de bons exemples lorsque vous essayez d'écrire les
    votres. Regardez dans le sous-répertoire
    <filename>contrib/file_fdw</filename> du répertoire des sources. La
    page de référence <xref linkend="sql-createforeigndatawrapper"/>
    contient aussi des détails utiles.
   </para>

   <note>
    <para>
     Le standard SQL spécifie une interface pour l'écriture des wrappers
     de données distantes. Néanmoins, PostgreSQL n'implémente pas cette
     API car l'effort nécessaire pour cela serait trop important. De
     toute façon, l'API standard n'est pas encore très adoptée.
    </para>
   </note>

   <sect1 id="fdw-functions">
    <title>Fonctions d'un wrapper de données distantes</title>

   <para>
    Le développeur d'un FDW doit écrire une fonction de gestion (handler)
    et, en option, une fonction de validation. Les deux fonctions doivent
    être écrites dans un langage compilé comme le C en utilisant
    l'interface version-1. Pour les détails sur les conventions d'appel
    et le chargement dynamique en langage C, voir <xref linkend="xfunc-c"/>.
   </para>

   <para>
    La fonction de gestion renvoie simplement une structure de pointeurs
    de fonctions callback qui seront appelées par le planificateur,
    l'exécuteur et différentes commandes de maintenance. La plupart du
    travail dans l'écriture d'une FDW se
    trouve dans l'implémentation de ces fonctions callback. La fonction
    de gestion doit être enregistrée dans
    <productname>PostgreSQL</productname> comme ne prenant aucun argument
    et renvoyant le pseudo-type <type>fdw_handler</type>. Les fonctions
    callback sont des fonctions en C et ne sont pas visibles ou
    appelables avec du SQL. Les fonctions callback sont décrites dans
    <xref linkend="fdw-callbacks"/>.
   </para>

   <para>
	 La fonction de validation est responsable de la validation des options
	 données dans les commandes <command>CREATE</command> et
	 <command>ALTER</command> pour son wrapper de données distantes,
	 ainsi que pour les serveurs distants, les correspondances
	 d'utilisateurs et les tables distants utilisant le wrapper. La
	 fonction de validation doit être enregistrée comme prenant deux
	 arguments&nbsp;: un tableau de texte contenant les options à
	 valider et un OID représentant le type d'objet avec lequel les
	 options sont validées (sous la forme d'un OID du catalogue système
	 où sera stocké l'objet, donc
     <literal>ForeignDataWrapperRelationId</literal>,
     <literal>ForeignServerRelationId</literal>,
     <literal>UserMappingRelationId</literal> ou
     <literal>ForeignTableRelationId</literal>).
     Si aucune fonction de validation n'est fournie, les options ne sont
     pas vérifiées au moment de la création ou de la modification de
     l'objet.
   </para>

   </sect1>

   <sect1 id="fdw-callbacks">
    <title>Routines callback des wrappers de données distantes</title>

    <para>
     La fonction de gestion d'une FDW renvoie une structure
     <structname>FdwRoutine</structname> allouée avec palloc. Elle
     contient des pointeurs vers les fonctions de callback suivantes&nbsp;:
    </para>

    <para>
<programlisting>
void
GetForeignRelSize (PlannerInfo *root,
                   RelOptInfo *baserel,
                   Oid foreigntableid);
</programlisting>

     Obtient des estimations de la taille de la relation pour une table distante.
     Elle est appelée au début de la planification d'une requête impliquant une
     table distante. <literal>root</literal> est l'information globale du
     planificateur sur la requête&nbsp;; <literal>baserel</literal> est
     l'information du planificateur sur la table&nbsp;; et
     <literal>foreigntableid</literal> est l'OID provenant de
     <structname>pg_class</structname> pour cette table distante.
     (<literal>foreigntableid</literal> pourrait être obtenu à partir de la
     structure de données du planificateur mais il est directement fourni pour
     ne pas avoir à faire cet effort.)
     </para>
 
     <para>
     Cette fonction doit mettre à jour <literal>baserel-&gt;rows</literal> pour
     que cela corresponde au nombre de lignes renvoyées par un parcours de table
     après avoir pris en compte le filtre réalisé par les clauses de restriction.
     La valeur initiale de <literal>baserel-&gt;rows</literal> est une estimation
     par défaut, qui doit être remplacée si possible. La fonction pourrait aussi
     choisir de mettre à jour <literal>baserel-&gt;width</literal> si elle
     peut calculer une meilleure estimation de la largeur moyenne d'une ligne du
     résultat.
    </para>

    <para>
     Voir <xref linkend="fdw-planning"/> pour plus d'informations.
    </para>

    <para>
<programlisting>
void
GetForeignPaths (PlannerInfo *root,
                 RelOptInfo *baserel,
                 Oid foreigntableid);
</programlisting>

     Crée les chemins d'accès possibles pour un parcours sur une table distante.
     Cette fonction est appelée lors de la planification de la requête. Les
     paramètres sont identiques à ceux de <function>GetForeignRelSize</function>,
     qui a déjà été appelée.
    </para>

    <para>
     Cette fonction doit générer au moins un chemin d'accès (nœud
     <structname>ForeignPath</structname>) pour un parcours sur une table
     distante et doit appeler <function>add_path</function> pour ajouter chaque
     chemin à <literal>baserel-&gt;pathlist</literal>. Il est recommandé
     d'utiliser <function>create_foreignscan_path</function> pour construire les
     nœuds <structname>ForeignPath</structname>. La fonction peut générer plusieurs
     chemins d'accès, c'est-à-dire un chemin qui a un champ
     <literal>pathkeys</literal> valide pour représenter un résultat pré-trié.
     Chaque chemin d'accès doit contenir les estimations de coûts et peut contenir
     toute information privée au FDW qui est nécessaire pour identifier la méthode
     attendue du parcours spécifique.
    </para>

    <para>
     Voir <xref linkend="fdw-planning"/> pour plus d'informations.
    </para>

    <para>
<programlisting>
ForeignScan *
GetForeignPlan (PlannerInfo *root,
                RelOptInfo *baserel,
                Oid foreigntableid,
                ForeignPath *best_path,
                List *tlist,
                List *scan_clauses);
</programlisting>

     Crée un nœud de plan <structname>ForeignScan</structname> à partir du chemin
     d'accès distant sélectionné. Cette fonction est appelé à la fin de la
     planification de la requête.
     Les paramètres sont identiques à ceux de la fonction
     <function>GetForeignRelSize</function>, avec en plus le
     <structname>ForeignPath</structname> sélectionné (précédemment produit par
     <function>GetForeignPaths</function>), la liste cible à émettre par le
     nœud du plan, et les clauses de restriction forcées par le nœud du plan.
    </para>

    <para>
     Cette fonction doit créer et renvoyer un nœud <structname>ForeignScan</structname>.
     Il est recommandé d'utiliser <function>make_foreignscan</function> pour
     construire le nœud <structname>ForeignScan</structname>.
     </para>
 
     <para>
     Voir <xref linkend="fdw-planning"/> pour plus d'informations.
    </para>

    <para>
<programlisting>
void
ExplainForeignScan (ForeignScanState *node,
                    ExplainState *es);
</programlisting>

     Affiche une sortie <command>EXPLAIN</command> supplémentaire pour
     un parcours de table distante. Elle peut ne rien renvoyer si ce
     n'est pas nécessaire. Sinon, elle doit appeler
     <function>ExplainPropertyText</function> et les fonctions relatives
     pour ajouter des champs à la sortie du <command>EXPLAIN</command>.
     Les champs drapeaux dans <literal>es</literal> peuvent être utilisés
     pour déterminer ce qui doit être affiché et l'état du n&oelig;ud
     <structname>ForeignScanState</structname> peut être inspecté pour
     fournir des statistiques à l'exécution dans le cas d'un
     <command>EXPLAIN ANALYZE</command>.
    </para>

    <para>
<programlisting>
void
BeginForeignScan (ForeignScanState *node,
                  int eflags);
</programlisting>

     Commence l'exécution d'un parcours distant. L'appel se fait lors du
     démarrage de l'exécuteur. Cette fonction doit réaliser toutes les
     initialisation nécessaires avant le démarrage du parcours, mais ne
     doit pas commencer à exécuter le vrai parcours (cela se fera lors
     du premier appel à <function>IterateForeignScan</function>). Le
     n&oelig;ud <structname>ForeignScanState</structname> est déjà créé
     mais son champ <structfield>fdw_state</structfield> vaut toujours
     NULL. Les informations sur la table à parcourir sont accessibles
     via le n&oelig;ud <structname>ForeignScanState</structname> (en
     particulier à partir du n&oelig;ud sous-jacent
     <structname>ForeignScan</structname> qui contient toute information
     privée au FDW fournie par <function>GetForeignPlan</function>).
    </para>

    <para>
     Notez que quand <literal>(eflags &amp; EXEC_FLAG_EXPLAIN_ONLY)</literal>
     est vraie, cette fonction ne doit pas réaliser d'actions visibles
     en externe. Elle doit seulement faire le minimum requis pour que
     l'état du n&oelig;ud soit valide pour
     <function>ExplainForeignScan</function> et
     <function>EndForeignScan</function>.
    </para>

    <para>
<programlisting>
TupleTableSlot *
IterateForeignScan (ForeignScanState *node);
</programlisting>

     Récupère une ligne de la source distante, la renvoyant dans un
     emplacement de ligne de table (le champ
     <structfield>ScanTupleSlot</structfield> du n&oelig;ud doit être
     utilisé dans ce but). Renvoie NULL s'il n'y a plus de lignes
     disponibles. L'infrastructure d'emplacement de ligne de table permet
     qu'une ligne physique ou virtuelle soit renvoyée. Dans la plupart
     des cas, la deuxième possibilité (virtuelle), est préférable d'un
     point de vue des performances. Notez que cette fonction est appelée
     dans un contexte mémoire dont la durée de vie est très courte et
     qui sera réinitialisé entre chaque appel. Créez un contexte mémoire
     dans <function>BeginForeignScan</function> si vous avez besoin d'un
     stockage qui tient plus longtemps ou utilisez le champ
     <structfield>es_query_cxt</structfield> de <structname>EState</structname>.
    </para>

    <para>
     Les lignes renvoyées doivent correspondre à la signature de la
     colonne de la table distante parcourue. Si vous préférez optimiser
     la récupération des colonnes inutiles, vous devez insérer des NULL
     dans les positions de ces colonnes
    </para>

    <para>
     Notez que l'exécuteur de <productname>PostgreSQL</productname> ne
     se préoccupe pas de savoir si les lignes renvoyées violent les
     contraintes <literal>NOT NULL</literal> définies sur les colonnes
     de la table distante. Le planificateur s'en préoccupe et pourrait
     mal optimiser les requêtes si des valeurs <literal>NULL</literal>
     sont présentes dans une colonne déclarée ne pas en contenir. Si une
     valeur <literal>NULL</literal> est découverte alors que l'utilisateur
     a déclaré qu'aucune valeur NULL ne devrait être présente, il pourrait
     être approprié de lever une erreur (exactement comme vous le feriez
     en cas d'un type de données inapproprié).
    </para>

    <para>
<programlisting>
void
ReScanForeignScan (ForeignScanState *node);
</programlisting>

     Recommence le parcours depuis le début. Notez que les paramètres
     dont dépent le parcours peuvent avoir changés de valeur, donc le
     nouveau parcours ne va pas forcément renvoyer les mêmes lignes.
    </para>

    <para>
<programlisting>
void
EndForeignScan (ForeignScanState *node);
</programlisting>

     Termine le parcours et relâche les ressources. Il n'est habituellement
     pas nécessaire de relâcher la mémoire allouée via palloc. Par contre,
     les fichiers ouverts et les connexions aux serveurs distants doivent
     être nettoyés.
    </para>

    <para>
<programlisting>
bool
AnalyzeForeignTable (Relation relation,
                     AcquireSampleRowsFunc *func,
                     BlockNumber *totalpages);
</programlisting>

     Cette fonction est appelée quand <xref linkend="sql-analyze"/> est exécuté
     sur une table distante. Si le wrapper de données distantes peut récupérer
     des statistiques pour cette table distante, il doit renvoyer
     <literal>true</literal>, et fournir un pointeur vers une fonction qui
     récupérera un échantillon de lignes à partir de la table dans
     <parameter>func</parameter>, ainsi que la taille estimée de la table en
     blocs dans <parameter>totalpages</parameter>. Sinon, il doit renvoyer
     <literal>false</literal>. Si le wrapper de données distantes ne supporte
     pas la récupération de statistiques quelque soit la table, le pointeur
     <function>AnalyzeForeignTable</function> doit être configuré à
     <literal>NULL</literal>.
    </para>

    <para>
     Si fourni, la fonction de récupération de l'échantillon doit avoir la
     signature suivante&nbsp;:
<programlisting>
int
AcquireSampleRowsFunc (Relation relation, int elevel,
                       HeapTuple *rows, int targrows,
                       double *totalrows,
                       double *totaldeadrows);
</programlisting>

     Un échantillon récupéré au hasard et comprenant au plus
     <parameter>targrows</parameter> lignes doit être récupéré à partir de la
     table et stocké dans le tableau <parameter>rows</parameter> fourni par
     l'appelant. Le nombre réel de lignes récupérées doit être renvoyé. De plus,
     les estimations du nombre total de lignes vivantes et mortes doivent être
     enregistrées dans les paramètres en sortie appelés
     <parameter>totalrows</parameter> et <parameter>totaldeadrows</parameter>.
     (Configurez <parameter>totaldeadrows</parameter> à zéro si le wrapper de
     données distantes ne connaît pas le concept des lignes mortes.)
    </para>

    <para>
     Le type de structure <structname>FdwRoutine</structname> est déclaré dans
     <filename>src/include/foreign/fdwapi.h</filename>, qui donne quelques
     informations supplémentaires.
    </para>

   </sect1>

   <sect1 id="fdw-helpers">
    <title>Fonctions d'aide pour les wrapper de données distantes</title>

    <para>
     Plusieurs fonctions d'aide sont exportées à partir du cœur du serveur, pour
     que les auteurs de wrappers de données distantes puissent accéder facilement
     aux attributs des objets en relation avec les wrappers, comme par exemple les
     options d'un wrapper. Pour utiliser une de ces fonctions, vous avez besoin
     d'inclure le fichier en-tête <filename>foreign/foreign.h</filename> dans
     votre fichier source. Cet en-tête définit aussi les types de structures qui
     sont renvoyés par ces fonctions.
    </para>

    <para>
<programlisting>
ForeignDataWrapper *
GetForeignDataWrapper(Oid fdwid);
</programlisting>

     Cette fonction renvoie un objet <structname>ForeignDataWrapper</structname>
     pour le wrapper de données distantes de l'OID spécifié. Un objet
     <structname>ForeignDataWrapper</structname> contient les propriétés du
     wrapper (voir <filename>foreign/foreign.h</filename> pour les détails).
    </para>

    <para>
<programlisting>
ForeignServer *
GetForeignServer(Oid serverid);
</programlisting>

     Cette fonction renvoie un objet <structname>ForeignServer</structname>
     pour le serveur distant de l'OID donné. Un objet
     <structname>ForeignServer</structname> contient les propriétés du serveur
     (voir <filename>foreign/foreign.h</filename> pour les détails).
    </para>

    <para>
<programlisting>
UserMapping *
GetUserMapping(Oid userid, Oid serverid);
</programlisting>

     Cette fonction renvoie un objet <structname>UserMapping</structname> pour
     la correspondance utilisateur du rôle donné sur le serveur donné.
     (S'il n'existe pas de correspondance utilisateur, la fonction renvoie
     la correspondance pour <literal>PUBLIC</literal> ou une erreur si cette
     dernière n'existe pas non plus.) Un objet
     <structname>UserMapping</structname> contient les propriétés de la
     correspondance utilisateur (voir <filename>foreign/foreign.h</filename>
     pour les détails).
    </para>

    <para>
<programlisting>
ForeignTable *
GetForeignTable(Oid relid);
</programlisting>

     Cette fonction renvoie un objet <structname>ForeignTable</structname> pour
     la table distante de l'OID donné. Un objet
     <structname>ForeignTable</structname> contient les propriétés de la table
     distante (voir <filename>foreign/foreign.h</filename> pour les détails).
    </para>

    <para>
<programlisting>
List *
GetForeignTableColumnOptions(Oid relid, AttrNumber attnum);
</programlisting>

     Cette fonction renvoie les opérations du wrapper de données distantes par
     colonne pour l'OID de la table distante donnée et le numéro de l'attribut
     sous la forme d'une liste de <structname>DefElem</structname>. NIL est
     renvoyé sur la colonne n'a pas d'options.
    </para>

    <para>
     Certains types d'objets ont des fonctions de recherche basées sur le nom
     en plus de celles basées sur l'OID&nbsp;:
    </para>

    <para>
<programlisting>
ForeignDataWrapper *
GetForeignDataWrapperByName(const char *name, bool missing_ok);
</programlisting>

     Cette fonction renvoie un objet <structname>ForeignDataWrapper</structname>
     pour le wrapper de données distante du nom indiqué. Si le wrapper n'est pas
     trouvé, cette fonction renvoie NULL si missing_ok vaut true, et renvoie
     une erreur sinon.
    </para>

    <para>
<programlisting>
ForeignServer *
GetForeignServerByName(const char *name, bool missing_ok);
</programlisting>

     Cette fonction renvoie un objet <structname>ForeignServer</structname> pour
     le serveur distant du nom donné. Si le serveur n'est pas trouvé, cette
     fonction renvoie NULL si missing_ok vaut true, et renvoie une erreur sinon.
     </para>
 
    </sect1>
 
   <sect1 id="fdw-planning">
    <title>Planification de la requête avec un wrapper de données distantes</title>

    <para>
     Les fonctions d'appels d'un wrapper de données distantes, <function>GetForeignRelSize</function>,
     <function>GetForeignPaths</function> et <function>GetForeignPlan</function>
     doivent s'intégrer au fonctionnement du planificateur de
     <productname>PostgreSQL</productname>. Voici quelques notes sur ce qu'elles
     doivent faire.
    </para>

    <para>
     Les informations dans <literal>root</literal> et <literal>baserel</literal>
     peuvent être utilisées pour réduire la quantité d'informations qui doivent
     être récupérées sur la table distante (et donc réduire le coût)
     <literal>baserel-&gt;baserestrictinfo</literal> est tout particulièrement
     intéressant car il contient les qualificatifs de restriction (clauses
     <literal>WHERE</literal>) qui doivent être utilisées pour filtrer les lignes
     à récupérer. (Le wrapper lui-même n'est pas requis de respecter ces clauses
     car l'exécuteur du moteur peut les vérifier à sa place.)
     <literal>baserel-&gt;reltargetlist</literal> peut être utilisé pour
     déterminer les colonnes à récupérer&nbsp;; mais notez qu'il liste seulement
     les colonnes qui doivent être émises par le nœud
     <structname>ForeignScan</structname>, et non pas les colonnes qui sont
     utilisées pour satisfaire l'évaluation des qualificatifs et non renvoyées
     par la requête.
    </para>

    <para>
     Divers champs privés sont disponibles pour que les fonctions de planification
     du wrapper de données distantes conservent les informations. Habituellement,
     tout ce que vous stockez dans les champs privées doit avoir été alloué avec
     la fonction palloc, pour que l'espace soit récupéré à la fin de la
     planification.
    </para>

    <para>
     <literal>baserel-&gt;fdw_private</literal> est un pointeur <type>void</type>
     disponible pour que les fonctions de planification du wrapper y stockent
     des informations correspondant à la table distante spécifique. Le planificateur
     du moteur n'y touche pas sauf lors de son initialisation à NULL quand le
     nœud <literal>baserel</literal> est créé. Il est utile de passer des
     informations de <function>GetForeignRelSize</function> à
     <function>GetForeignPaths</function> et/ou <function>GetForeignPaths</function>
     à <function>GetForeignPlan</function>, évitant du coup un recalcul.
    </para>

    <para>
     <function>GetForeignPaths</function> peut identifier la signification de
     chemins d'accès différents pour enregistrer des informations privées dans
     le champ <structfield>fdw_private</structfield> des nœuds
     <structname>ForeignPath</structname>. <structfield>fdw_private</structfield>
     est déclaré comme un pointeur <type>List</type> mais peut contenir réellement
     n'importe quoi car le planificateur du moteur n'y touche pas. Néanmoins, une
     bonne pratique est d'utiliser une représentation qui est affichable par
     <function>nodeToString</function>, pour son utilisation avec le support du
     débogage disponible dans le processus.
    </para>

    <para>
     <function>GetForeignPlan</function> peut examiner le champ
     <structfield>fdw_private</structfield> du nœud
     <structname>ForeignPath</structname>, et peut générer les listes
     <structfield>fdw_exprs</structfield> et <structfield>fdw_private</structfield>
     à placer dans le nœud de plan <structname>ForeignScan</structname>, où
     elles seront disponibles au moment de l'exécution. Les deux listes doivent
     être représentées sous une forme que <function>copyObject</function> sait
     copier. La liste <structfield>fdw_private</structfield> n'a pas d'autres
     restrictions et n'est pas interprétée par le processus moteur. La liste
     <structfield>fdw_exprs</structfield>, si non NULL, devrait contenir
     les arbres d'expressions qui devront être exécutées. Ces arbres passeront
     par un post-traitement par le planificateur qui les rend complètement
     exécutables.
    </para>

    <para>
     Dans <function>GetForeignPlan</function>, habituellement, la liste cible
     fournie peut être copiée dans le nœud du plan tel quel. La liste
     scan_clauses fournie contient les mêmes clauses que
     <literal>baserel-&gt;baserestrictinfo</literal> mais ces clauses pourraient
     être ré-ordonnées pour une meilleure efficacité à l'exécution. Dans les cas
     simples, le wrapper peut seulement supprimer les nœuds
     <structname>RestrictInfo</structname> de la liste scan_clauses (en utilisant
     <function>extract_actual_clauses</function>) et placer toutes les clauses
     dans la liste des qualificatifs du nœud. Cela signifie que toutes les clauses
     seront vérifiées par l'exécuteur au moment de l'exécution. Les wrappers les
     plus complexes peuvent être capables de vérifier certaines clauses en interne,
     auquel cas ces clauses peuvent être supprimées de la liste de qualificatifs
     du nœud du plan pour que le planificateur ne perde pas de temps à les
     vérifier de nouveau.
    </para>

    <para>
     Comme exemple, le wrapper peut identifier certaines clauses de restriction
     de la forme <replaceable>variable_distante</replaceable> <literal>=</literal>
     <replaceable>sous_expression</replaceable>, qui, d'après lui, peut être
     exécuté sir le serveur distant en donnant la valeur évaluée localement de
     la <replaceable>sous_expression</replaceable>. L'identification réelle d'une
     telle clause doit survenir lors de l'exécution de
     <function>GetForeignPaths</function> car cela va affecter l'estimation ddu
     coût pour le chemin. Le champ <structfield>fdw_private</structfield> du
     chemin pourrait probablement inclure un pointeur vers le nœud
     <structname>RestrictInfo</structname> de la clause identifiée. Puis,
     <function>GetForeignPlan</function> pourrait supprimer cette clause de
     scan_clauses et ajouter la <replaceable>sous_expression</replaceable> à
     <structfield>fdw_exprs</structfield> pour s'assurer qu'elle soit convertie
     en une forme exécutable. Il pourrait aussi placer des informations de contrôle
     dans le champ <structfield>fdw_private</structfield> du nœud pour dire aux
     fonctions d'exécution ce qu'il faudra faire au moment de l'exécution. La
     requête transmise au serveur distant va impliquer quelque chose comme
     <literal>WHERE <replaceable>variable_distante</replaceable> =
     $1</literal>, avec la valeur du paramètre obtenu à l'exécution à partir de
     l'évaluation de l'arbre d'expression <structfield>fdw_exprs</structfield>.
    </para>

    <para>
     Le wrapper de données distantes devrait toujours construire au moins un
     chemin qui dépend seulement des clauses de restriction de la table. Dans
     les requêtes de jointure, il pourrait aussi choisir de construire des
     chemins qui dépendent des clauses de jointures. Par exemple,
     <replaceable>variable_distante</replaceable> <literal>=</literal>
     <replaceable>variable_local</replaceable>. De telles clauses ne se trouveront
     pas dans <literal>baserel-&gt;baserestrictinfo</literal> mais doivent être
     dans les listes de jointures des relations. Un chemin utilisant une telle
     clause est appelé un <quote>parameterized path</quote>. Il doit montrer l'autre
     relation comme <literal>required_outer</literal> et lister les clauses de
     jointure spécifiques dans <literal>param_clauses</literal>. Dans
     <function>GetForeignPlan</function>, la portion
     <replaceable>local_variable</replaceable> de la clause de jointure pourra être
     ajoutée à <structfield>fdw_exprs</structfield>, et ensuite à l'exécution, cela
     fonctionne de la même façon que pour une clause de restriction standard.
    </para>

  </sect1>


 </chapter>
