<?xml version="1.0" encoding="UTF-8"?>
 <chapter id="fdwhandler">
   <title>Écrire un wrapper de données distantes</title>

   <indexterm zone="fdwhandler">
    <primary>wrapper de données distantes</primary>
    <secondary>gestionnaire</secondary>
   </indexterm>

   <para>
    Toutes les opérations sur une table distante sont gérées via un
    wrapper de données distantes. Ce dernier est un ensemble de fonctions
    que le planificateur et l'exécuteur appelle. Le wrapper de données
    distantes est responsable de la récupération des données à partir de
    le source de données distante et de leur renvoi à l'exécuteur
    <productname>PostgreSQL</productname>. Ce chapitre indique comment
    écrire un nouveau wrapper de données distantes.
   </para>

   <para>
    Les wrappers de données distantes incluent dans la distribution
    standard sont de bons exemples lorsque vous essayez d'écrire les
    votres. Regardez dans le sous-répertoire
    <filename>contrib/file_fdw</filename> du répertoire des sources. La
    page de référence <xref linkend="sql-createforeigndatawrapper"/>
    contient aussi des détails utiles.
   </para>

   <note>
    <para>
     Le standard SQL spécifie une interface pour l'écriture des wrappers
     de données distantes. Néanmoins, PostgreSQL n'implémente pas cette
     API car l'effort nécessaire pour cela serait trop important. De
     toute façon, l'API standard n'est pas encore très adoptée.
    </para>
   </note>

   <sect1 id="fdw-functions">
    <title>Fonctions d'un wrapper de données distantes</title>

   <para>
    Le développeur d'un FDW doit écrire une fonction de gestion (handler)
    et, en option, une fonction de validation. Les deux fonctions doivent
    être écrites dans un langage compilé comme le C en utilisant
    l'interface version-1. Pour les détails sur les conventions d'appel
    et le chargement dynamique en langage C, voir <xref linkend="xfunc-c"/>.
   </para>

   <para>
    La fonction de gestion renvoie simplement une structure de pointeurs
    de fonctions callback qui seront appelées par le planificateur et
    l'exécuteur. La plupart du travail dans l'écriture d'une FDW se
    trouve dans l'implémentation de ces fonctions callback. La fonction
    de gestion doit être enregistrée dans
    <productname>PostgreSQL</productname> comme ne prenant aucun argument
    et renvoyant le pseudo-type <type>fdw_handler</type>. Les fonctions
    callback sont des fonctions en C et ne sont pas visibles ou
    appelables avec du SQL. Les fonctions callback sont décrites dans
    <xref linkend="fdw-callbacks"/>.
   </para>

   <para>
	 La fonction de validation est responsable de la validation des options
	 données dans les commandes <command>CREATE</command> et
	 <command>ALTER</command> pour son wrapper de données distantes,
	 ainsi que pour les serveurs distants, les correspondances
	 d'utilisateurs et les tables distants utilisant le wrapper. La
	 fonction de validation doit être enregistrée comme prenant deux
	 arguments&nbsp;: un tableau de texte contenant les options à
	 valider et un OID représentant le type d'objet avec lequel les
	 options sont validées (sous la forme d'un OID du catalogue système
	 où sera stocké l'objet, donc
     <literal>ForeignDataWrapperRelationId</literal>,
     <literal>ForeignServerRelationId</literal>,
     <literal>UserMappingRelationId</literal> ou
     <literal>ForeignTableRelationId</literal>).
     Si aucune fonction de validation n'est fournie, les options ne sont
     pas vérifiées au moment de la création ou de la modification de
     l'objet.
   </para>

   </sect1>

   <sect1 id="fdw-callbacks">
    <title>Routines callback des wrappers de données distantes</title>

    <para>
     La fonction de gestion d'une FDW renvoie une structure
     <structname>FdwRoutine</structname> allouée avec palloc. Elle
     contient des pointeurs vers les fonctions de callback suivantes&nbsp;:
    </para>

    <para>
<programlisting>
FdwPlan *
PlanForeignScan (Oid foreigntableid,
                 PlannerInfo *root,
                 RelOptInfo *baserel);
</programlisting>

     Planifie un parcours d'une table distante. Cette fonction est
     appelée lors de la planification d'une requête.
     <literal>foreigntableid</literal> est l'OID
     <structname>pg_class</structname> de la table distante.
     <literal>root</literal> sont des informations globales du
     planificateur sur la requête et <literal>baserel</literal> sont les
     informations du planificateur sur cette table. La fonction doit
     renvoyer une structure allouée par palloc, contenant les estimations
     de coût, ainsi que toute information privée du FDW, nécessaires à
     l'exécution du parcours plus tard. (Notez que les informations
     privées doivent être représentées sous une forme que
     <function>copyObject</function> sait copier.)
    </para>

    <para>
     Les informations comprises dans <literal>root</literal> et
     <literal>baserel</literal> peuvent être utilisées pour réduire les
     informations à récupérer de la table distante (et du coup réduire
     l'estimation de coût). En particulier,
     <literal>baserel-&gt;baserestrictinfo</literal> est intéressant car
     il contient les qualificatifs de restriction (clauses
     <literal>WHERE</literal>) qui peuvent être utilisés pour filter les
     lignes à récupérer. (La FDW n'a pas besoin de forcer ces
     qualificatifs car le plan final les vérifiera de toute façon.)
     <literal>baserel-&gt;reltargetlist</literal> est utilisable pour
     déterminer les colonnes à récupérer.
    </para>

    <para>
     En plus du renvoi des estimations de coûts, la fonction doit mettre
     à jour <literal>baserel-&gt;rows</literal> pour qu'elle corresponde
     au nombre de lignes que le FDW s'attend renvoyer lors du parcours,
     après avoir pris en compte le filtrage réalisé par les qualificatifs
     de restriction. La valeur initiale de
     <literal>baserel-&gt;rows</literal> est simplement une estimation
     constante par défaut, devant être remplacée si c'est possible. La
     fonction peut aussi choisir de mettre à jour
     <literal>baserel-&gt;width</literal> s'il peut calculer une meilleure
     estimation de la largeur moyenne d'une ligne de résultat.
    </para>

    <para>
<programlisting>
void
ExplainForeignScan (ForeignScanState *node,
                    ExplainState *es);
</programlisting>

     Affiche une sortie <command>EXPLAIN</command> supplémentaire pour
     un parcours de table distante. Elle peut ne rien renvoyer si ce
     n'est pas nécessaire. Sinon, elle doit appeler
     <function>ExplainPropertyText</function> et les fonctions relatives
     pour ajouter des champs à la sortie du <command>EXPLAIN</command>.
     Les champs drapeaux dans <literal>es</literal> peuvent être utilisés
     pour déterminer ce qui doit être affiché et l'état du n&oelig;ud
     <structname>ForeignScanState</structname> peut être inspecté pour
     fournir des statistiques à l'exécution dans le cas d'un
     <command>EXPLAIN ANALYZE</command>.
    </para>

    <para>
<programlisting>
void
BeginForeignScan (ForeignScanState *node,
                  int eflags);
</programlisting>

     Commence l'exécution d'un parcours distant. L'appel se fait lors du
     démarrage de l'exécuteur. Cette fonction doit réaliser toutes les
     initialisation nécessaires avant le démarrage du parcours, mais ne
     doit pas commencer à exécuter le vrai parcours (cela se fera lors
     du premier appel à <function>IterateForeignScan</function>). Le
     n&oelig;ud <structname>ForeignScanState</structname> est déjà créé
     mais son champ <structfield>fdw_state</structfield> vaut toujours
     NULL. Les informations sur la table à parcourir sont accessibles
     via le n&oelig;ud <structname>ForeignScanState</structname> (en
     particulier à partir du n&oelig;ud sous-jacent
     <structname>ForeignScan</structname> qui contient un pointeur vers
     la structure <structname>FdwPlan</structname> renvoyée par
     <function>PlanForeignScan</function>).
    </para>

    <para>
     Notez que quand <literal>(eflags &amp; EXEC_FLAG_EXPLAIN_ONLY)</literal>
     est vraie, cette fonction ne doit pas réaliser d'actions visibles
     en externe. Elle doit seulement faire le minimum requis pour que
     l'état du n&oelig;ud soit valide pour
     <function>ExplainForeignScan</function> et
     <function>EndForeignScan</function>.
    </para>

    <para>
<programlisting>
TupleTableSlot *
IterateForeignScan (ForeignScanState *node);
</programlisting>

     Récupère une ligne de la source distante, la renvoyant dans un
     emplacement de ligne de table (le champ
     <structfield>ScanTupleSlot</structfield> du n&oelig;ud doit être
     utilisé dans ce but). Renvoie NULL s'il n'y a plus de lignes
     disponibles. L'infrastructure d'emplacement de ligne de table permet
     qu'une ligne physique ou virtuelle soit renvoyée. Dans la plupart
     des cas, la deuxième possibilité (virtuelle), est préférable d'un
     point de vue des performances. Notez que cette fonction est appelée
     dans un contexte mémoire dont la durée de vie est très courte et
     qui sera réinitialisé entre chaque appel. Créez un contexte mémoire
     dans <function>BeginForeignScan</function> si vous avez besoin d'un
     stockage qui tient plus longtemps ou utilisez le champ
     <structfield>es_query_cxt</structfield> de <structname>EState</structname>.
    </para>

    <para>
     Les lignes renvoyées doivent correspondre à la signature de la
     colonne de la table distante parcourue. Si vous préférez optimiser
     la récupération des colonnes inutiles, vous devez insérer des NULL
     dans les positions de ces colonnes
    </para>

    <para>
     Notez que l'exécuteur de <productname>PostgreSQL</productname> ne
     se préoccupe pas de savoir si les lignes renvoyées violent les
     contraintes <literal>NOT NULL</literal> définies sur les colonnes
     de la table distante. Le planificateur s'en préoccupe et pourrait
     mal optimiser les requêtes si des valeurs <literal>NULL</literal>
     sont présentes dans une colonne déclarée ne pas en contenir. Si une
     valeur <literal>NULL</literal> est découverte alors que l'utilisateur
     a déclaré qu'aucune valeur NULL ne devrait être présente, il pourrait
     être approprié de lever une erreur (exactement comme vous le feriez
     en cas d'un type de données inapproprié).
    </para>

    <para>
<programlisting>
void
ReScanForeignScan (ForeignScanState *node);
</programlisting>

     Recommence le parcours depuis le début. Notez que les paramètres
     dont dépent le parcours peuvent avoir changés de valeur, donc le
     nouveau parcours ne va pas forcément renvoyer les mêmes lignes.
    </para>

    <para>
<programlisting>
void
EndForeignScan (ForeignScanState *node);
</programlisting>

     Termine le parcours et relâche les ressources. Il n'est habituellement
     pas nécessaire de relâcher la mémoire allouée via palloc. Par contre,
     les fichiers ouverts et les connexions aux serveurs distants doivent
     être nettoyés.
    </para>

    <para>
     Les types de structure <structname>FdwRoutine</structname> et
     <structname>FdwPlan</structname> sont déclarés dans
     <filename>src/include/foreign/fdwapi.h</filename>, qui est à lire
     pour des détails supplémentaires.
    </para>

   </sect1>

 </chapter>
