<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<chapter id="monitoring">
 <title>Surveiller l'activité de la base de données</title>

 <indexterm zone="monitoring">
  <primary>surveiller</primary>
  <secondary>activité de la base de données</secondary>
 </indexterm>

 <indexterm zone="monitoring">
  <primary>activité de la base de données</primary>
  <secondary>suveiller</secondary>
 </indexterm>

 <para>
  Un administrateur de bases de données se demande fréquemment&nbsp;: <quote>Que
  fait le système en ce moment&nbsp;?</quote> Ce chapitre discute de la façon
  de le savoir.
 </para>

  <para>
   Plusieurs outils sont disponibles pour surveiller l'activité de la base de
   données et pour analyser les performances. Une grande partie de ce chapitre
   concerne la description du récupérateur de statistiques de
   <productname>PostgreSQL</productname> mais personne ne devrait négliger les
   programmes de surveillance Unix standards tels que <command>ps</command>,
   <command>top</command>, <command>iostat</command> et <command>vmstat</command>. De plus, une fois
   qu'une requête peu performante a été identifiée, des investigations
   supplémentaires pourraient être nécessaires en utilisant la commande <xref
   linkend="sql-explain"/> de
   <productname>PostgreSQL</productname>. La <xref linkend="using-explain"/>
   discute de <command>EXPLAIN</command> et des autres méthodes pour comprendre le
   comportement d'une seule requête.
  </para>

 <sect1 id="monitoring-ps">
  <title>Outils Unix standard</title>

  <indexterm zone="monitoring-ps">
   <primary>ps</primary>
   <secondary>pour surveiller l'activité</secondary>
  </indexterm>

  <para>
   Sur la plupart des plateformes Unix, <productname>PostgreSQL</productname> modifie
   son titre de commande reporté par <command>ps</command> de façon à ce que les
   processus serveur individuels puissent être rapidement identifiés. Voici un
   affichage d'exemple&nbsp;:

<screen>$ ps auxww | grep ^postgres
postgres   960  0.0  1.1  6104 1480 pts/1    SN   13:17   0:00 postgres -i
postgres   963  0.0  1.1  7084 1472 pts/1    SN   13:17   0:00 postgres: writer process   
postgres   965  0.0  1.1  6152 1512 pts/1    SN   13:17   0:00 postgres: stats collector process   
postgres   998  0.0  2.3  6532 2992 pts/1    SN   13:18   0:00 postgres: tgl runbogue 127.0.0.1 idle
postgres  1003  0.0  2.4  6532 3128 pts/1    SN   13:19   0:00 postgres: tgl regression [local] SELECT waiting
postgres  1016  0.1  2.4  6532 3080 pts/1    SN   13:19   0:00 postgres: tgl regression [local] idle in transaction</screen>

   (L'appel approprié de <command>ps</command> varie suivant les différentes
   plateformes, de même que les détails affichés. Cet exemple est
   tiré d'un système Linux récent.) Le premier processus affiché ici est le
   processus serveur maître, le processus serveur maître. Les arguments
   affichés pour cette commande sont les mêmes qu'à son lancement. Les deux
   processus suivant sont des processus en tâche de fond lancés
   automatiquement par le processus maître (le processus
   <quote>stats collector</quote> n'est pas présent si
   vous avez configuré le système pour qu'il ne lance pas le récupérateur de
   statistiques). Chacun des autres processus est un processus serveur gérant
   une connexion cliente. Tous ces processus restant initialisent l'affichage de
   la ligne de commande de la forme

<screen>postgres: <replaceable>utilisateur</replaceable> <replaceable>base_de_données</replaceable> <replaceable>hôte</replaceable> <replaceable>activité</replaceable></screen>

  L'utilisateur, la base de données et les éléments de l'hôte (client)
  restent identiques pendant toute la vie de connexion du client mais
  l'indicateur d'activité change. L'activité pourrait être <literal>idle</literal>
  (c'est-à-dire en attente d'une commande du client), <literal>idle in
  transaction</literal> (en attente du client à l'intérieur d'un bloc de
  <command>BEGIN</command>/<command>COMMIT</command>) ou un nom de commande du type
  <literal>SELECT</literal>. De plus, <literal>waiting</literal> est ajouté si le processus
  serveur est en attente d'un verrou détenu par une autre session.
  Dans l'exemple ci-dessus, nous pouvons supposer que le processus 1003 attend
  que le processus 1016 ait terminé sa transaction et, du coup, libère un verrou.
  </para>

  <para>
   Si vous avez désactivé <xref linkend="guc-update-process-title"/>, alors
   l'indicateur d'activité n'est pas mis à jour&nbsp;; le titre du processus
   est configuré une seule fois quand un nouveau processus est lancé. Sur
   certaines plateformes, ceci permet d'économiser du temps. Sur d'autres,
   cette économie est insignifiante.
  </para>

  <tip>
  <para>
  <productname>Solaris</productname> requiert une gestion particulière. Vous
  devez utiliser <command>/usr/ucb/ps</command> plutôt que
  <command>/bin/ps</command>. Vous devez aussi utiliser deux options
  <option>w</option> et non pas seulement une. En plus, votre appel original de
  la commande <command>postgres</command> doit avoir un affichage de statut
  dans <command>ps</command> plus petit que celui fourni par les autres
  processus serveur. Si vous échouez dans les trois, l'affichage de
  <command>ps</command> pour chaque processus serveur sera la ligne de commande
  originale de <command>postgres</command>.
  </para>
  </tip>
 </sect1>

 <sect1 id="monitoring-stats">
  <title>Le récupérateur de statistiques</title>

  <indexterm zone="monitoring-stats">
   <primary>statistiques</primary>
  </indexterm>

  <para>
   Le <firstterm>récupérateur de statistiques</firstterm> de
   <productname>PostgreSQL</productname> est un sous-système qui supporte la
   récupération et les rapports d'informations sur l'activité du serveur.
   Actuellement, le récupérateur peut compter les accès aux tables et index à la
   fois en terme de blocs disque et de lignes individuelles. Il conserve aussi
   la trace du nombre total de lignes dans chaque table ainsi que des informations
   sur les VACUUM et les ANALYZE pour chaque table.
   Il peut aussi compter le nombre d'appels aux fonctions définies par
   l'utilisateur ainsi que le temps total dépensé par chacune.
  </para>

  <para>
   <productname>PostgreSQL</productname> supporte aussi
   la détermination de la commande exacte en cours d'exécution par les autres
   processus serveur. Cette fonctionnalité indépendante ne dépend pas du
   récupérateur de statistiques.
  </para>

 <sect2 id="monitoring-stats-setup">
  <title>Configuration de la récupération de statistiques</title>

  <para>
   Comme la récupération de statistiques ajoute un temps supplémentaire à
   l'exécution de la requête, le système peut être configuré pour récupérer ou
   non des informations. Ceci est contrôlé par les paramètres de configuration
   qui sont normalement initialisés dans <filename>postgresql.conf</filename> (voir
   <xref linkend="runtime-config"/> pour plus de détails sur leur
   initialisation).
  </para>

  <para>
   Le paramètre <xref linkend="guc-track-counts"/> contrôle si les statistiques
   sont récupérées pour les accès aux tables et index.
  </para>

  <para>
   Le paramètre <xref linkend="guc-track-functions"/> active le calcul de
   statistiques sur l'utilisation des fonctions définies par l'utilisateur.
  </para>

  <para>
   Le paramètre <xref linkend="guc-track-activities"/> active la surveillance
   de la commande en cours d'exécution par un processus serveur.
  </para>

  <para>
   Normalement, ces paramètres sont configurés dans
   <filename>postgresql.conf</filename> de façon à ce qu'ils s'appliquent à tous les
   processus serveur mais il est possible de les activer/désactiver sur des
   sessions individuelles en utilisant la commande <xref
   linkend="sql-set"/> (pour empêcher les utilisateurs
   ordinaires de cacher leur activité à l'administrateur, seuls les
   superutilisateurs sont autorisés à modifier ces paramètres avec
   <command>SET</command>).
  </para>

  <para>
   Le collecteur de statistiques transmet les informations récupérées
   aux processus du moteur (y compris l'autovacuum) via des fichiers
   temporaires. Ces fichiers sont stockées
   dans le sous-répertoire <filename>pg_stat_tmp</filename>. Quand le processus
   père est arrêté, une copie permanente des données statistiques est stockée
   dans le sous-répertoire <filename>global</filename>. Pour des performances
   accrues, le paramètre <xref linkend="guc-stats-temp-directory"/> peut être
   pointé vers un système de fichiers en RAM, diminuant fortement les besoins
   en entrées/sorties.
  </para>

  <para>
   Une transaction peut aussi voir des statistiques propres à son
   activité (qui ne sont pas encore transmises au collecteur) dans les
   vues <structname>pg_stat_xact_all_tables</structname>,
   <structname>pg_stat_xact_sys_tables</structname>,
   <structname>pg_stat_xact_user_tables</structname> et
   <structname>pg_stat_xact_user_functions</structname>, ou via les
   fonctions appelées par ces vues. Ces informations se mettent à jour
   en continue pendant l'exécution de la transaction.
  </para>

 </sect2>

 <sect2 id="monitoring-stats-views">
  <title>Visualiser les statistiques récupérées</title>

  <para>
   Plusieurs vues prédéfinies, listées dans le <xref
   linkend="monitoring-stats-views-table"/>, sont disponibles pour afficher
   les résultats de la récupération de statistiques. Autrement, vous pouvez
   construire des vues personnalisées en utilisant les fonctions statistiques
   existantes.
  </para>

  <para>
   En utilisant les statistiques pour surveiller l'activité en cours, il est
   important de réaliser que l'information n'est pas mise à jour instantanément.
   Chaque processus serveur individuel transmet les nouvelles statistiques au
   récupérateur juste avant l'attente d'une
   nouvelle commande du client&nbsp;; donc une requête toujours en cours
   n'affecte pas les totaux affichés. De plus, le récupérateur lui-même émet un
   nouveau rapport une fois par <varname>PGSTAT_STAT_INTERVAL</varname>
   millisecondes (500, sauf si cette valeur a été modifiée lors de la
   construction du serveur). Donc, les totaux affichés sont bien derrière
   l'activité réelle. Néanmoins, l'information sur la requête en cours récupérée
   par <varname>track_activities</varname> est toujours à jour.
  </para>

  <para>
   Un autre point important est que, lorsqu'un processus serveur se voit
   demander d'afficher une des statistiques, il récupère tout d'abord le rapport
   le plus récent émis par le processus de récupération, puis continue
   d'utiliser cette image de toutes les vues et fonctions statistiques jusqu'à
   la fin de sa transaction en cours. De façon similaire, les informations sur
   les requêtes en cours, quelque soit le processus, sont récupérées quand une
   telle information est demandée dans une transaction, et cette même information
   sera affichée lors de la transaction. Donc, les statistiques afficheront des
   informations statiques tant que vous restez dans la même transaction. Ceci est une
   fonctionnalité, et non pas un bogue, car il vous permet de traiter plusieurs
   requêtes sur les statistiques et de corréler les résultats sans vous
   inquiéter que les nombres aient pu changer. Mais si vous voulez voir les
   nouveaux résultats pour chaque requête, assurez-vous de lancer les requêtes
   en dehors de tout bloc de transaction. Autrement, vous pouvez appeler
   <function>pg_stat_clear_snapshot</function>(), qui annulera l'image statistique
   de la transaction en cours. L'utilisation suivante des informations
   statistiques causera la récupération d'une nouvelle image.
  </para>

  <table id="monitoring-stats-views-table">
   <title>Vues statistiques standards</title>

   <tgroup cols="2">
    <colspec colnum="1" colwidth="0.4*"/>
    <colspec colnum="2" colwidth="1.6*"/>
    <thead>
     <row>
      <entry>Nom de la vue</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structname>pg_stat_activity</structname><indexterm><primary>pg_stat_activity</primary></indexterm></entry>
      <entry>Une ligne par processus serveur, affichant l'OID de la base de
      données, le nom de la base, l'<acronym>ID</acronym> du processus, l'OID de
      l'utilisateur, son nom, le nom de l'application, l'adresse, le
      nom de l'hôte (si disponible) et le port du
      client, la date et l'heure à laquelle le client s'est connecté, de début
      de la transaction, et de début de la requête, le statut d'attente de
      verrou du processus et le texte de la requête en cours d'exécution. Les
      colonnes renvoyant des données sur la
      requête en cours sont disponibles sauf si le paramètre
      <varname>track_activities</varname> a été désactivé. De
      plus, ces colonnes sont seulement visibles si l'utilisateur examinant
      cette vue est un superutilisateur ou est le propriétaire du processus en
      cours de rapport. Le nom de l'hôte du client sera disponible
      seulement si <xref linkend="guc-log-hostname"/> est activé ou s'il
      a été nécessaire de le rechercher pendant la phase d'authentification
      (<filename>pg_hba.conf</filename>).</entry>
     </row>

     <row>
      <entry><structname>pg_stat_bgwriter</structname><indexterm><primary>pg_stat_bgwriter</primary></indexterm></entry>
      <entry>Une seule ligne indiquant des statistiques du cluster complet
      provenant du processus d'écriture en tâche de fond&nbsp;: nombre
      de points de vérification planifiés, points de vérification demandés,
      tampons écrits par les points de vérification et parcours de nettoyage,
      et le nombre de fois où le processus d'écriture en tâche de fond a stoppé
      un parcours de nettoyage parce qu'il a écrit trop de tampons. Cela inclut
      aussi des statistiques sur les tampons partagés dont le nombre de
      tampons écrit par les processus serveur (c'est-à-dire par autre chose
      que le processus d'écriture en tâche de fond), sur le nombre de
      fois que les processus serveurs ont exécuté eux-mêmes des appels à
      fsync (normalement, le processus d'écriture en tâche de fond s'en
      occupe même si le processus serveur a fait les écritures), le
      nombre de tampons alloués et l'horodatage de la dernière
      réinitialisation des statistiques.
     </entry>
     </row>

     <row>
      <entry><structname>pg_stat_database</structname><indexterm><primary>pg_stat_database</primary></indexterm></entry>
      <entry>Une ligne par base de données, affichant l'OID de la base de
      données, son nom, le nombre de processus serveur actifs connectés à cette
      base, le nombre total de transactions validées et le nombre de
      celles qui ont été annulées, le nombre total de blocs disque lus, le
      nombre total de succès du tampon (c'est-à-dire le nombre de lectures de
      blocs évitées en trouvant déjà le bloc dans le cache du tampon), le
      nombre de lignes renvoyées, récupérées, insérées, mises à jour et
      supprimées, le nombre total de requêtes annulées à cause d'un
      conflit avec la restauration (sur les serveurs en standby) et
      l'horodatage de la dernière réinitialisation des statistiques.
     </entry>
     </row>

     <row>
      <entry><structname>pg_stat_database_conflicts</structname><indexterm><primary>pg_stat_database_conflicts</primary></indexterm></entry>
      <entry>Une ligne par base de données, affichant l'OID de la base,
      son nom et le nombre de requêtes qui ont été annulées dans cette
      base à cause de tablespaces supprimées, de délais dépassés pour les
      verrous, d'images de base trop anciennes, de tampons verrouillés
      et de verrous mortels. Ne contiendra que des informations sur les
      serveurs en standby car les conflits ne surviennent pas sur les
      serveurs maîtres.
     </entry>
     </row>

     <row>
      <entry><structname>pg_stat_replication</structname><indexterm><primary>pg_stat_replication</primary></indexterm></entry>
      <entry>Une ligne par processus walsender, affichant l'identifiant
      du processus, l'OID de l'utilisateur, le nom de l'utilisateur,
      le nom de l'application, l'adresse du client, le nom d'hôte (si
      disponible) et le numéro de port, la date et l'heure à laquelle le
      processus serveur a commencé son exécution, l'état du processus et
      la position dans les journaux de transactions. De plus, le serveur
      en standby rapporte la dernière position reçue et écrite dans les
      journaux de transactions, la dernière position qu'il a écrite sur
      disque, et la dernière position qu'il a rejouée. Cette information
      est aussi affichée ici. Si les noms d'applications du serveur en
      standby correspondent à un de noms configurés dans
      <varname>synchronous_standby_names</varname>, alors la priorité de
      synchronisation est aussi affichée ici (cela correspond à l'ordre
      dans lequel les serveurs en standby deviennent le serveur synchrone).
      Les colonnes détaillant le travail de la connexion sont seulement
      visibles si l'utilisateur qui examine la vue est un superutilisateur.
      Le nom de l'hôte du client sera disponible seulement si
      <xref linkend="guc-log-hostname"/> est activé ou s'il a été
      nécessaire de rechercher le nom d'hôte de l'utilisateur pendant
      la phase d'authentification (<filename>pg_hba.conf</filename>).
     </entry>
     </row>

     <row>
      <entry><structname>pg_stat_all_tables</structname><indexterm><primary>pg_stat_all_tables</primary></indexterm></entry>
      <entry>Pour chaque table dans la base de données en cours (ceci 
      incluant les tables TOAST), l'OID de la table, le nom du schéma et de la
      table, le nombre de parcours séquentiels réalisés, le nombre de lignes
      vivantes récupérées par des parcours séquentiels, le nombre de lignes
      vivantes récupérées par des parcours séquentiels, le nombre de parcours
      d'index réalisés (pour tous les index appartenant à cette table), le
      nombre de lignes vivantes récupérées par les parcours d'index, le nombre
      d'insertions, de modifications et de suppressions de ligne, le nombre de
      mises à jour de ligne via HOT (donc sans mise à jour séparée des index),
      le nombre de lignes vivantes et mortes, la dernière
      fois que la table a été la cible d'un VACUUM manuel (sans l'option <option>FULL</option>), la dernière fois
      qu'elle a été la cible d'un VACUUM exécuté par le démon autovacuum, la
      dernière fois que la table a été la cible d'un ANALYZE manuel, la dernière
      fois qu'elle a été la cible d'un ANALYZE exécuté par le démon autovacuum,
      le nombre de fois que la table a été la cible d'un VACUUM manuel
      (sans l'option <option>FULL</option>), le nombre de fois qu'elle a
      été la cible d'un VACUUM exécuté par le démon autovacuum, le nombre
      de fois que la table a été la cible d'un ANALYZE manuel, le nombre
      de fois qu'elle a été la cible d'un ANALYZE exécuté par le démon
      autovacuum.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_sys_tables</structname><indexterm><primary>pg_stat_sys_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_all_tables</structname>, sauf que seules les
      tables systèmes sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_tables</structname><indexterm><primary>pg_stat_user_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_all_tables</structname>, sauf que seules les
      tables utilisateurs sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_all_tables</structname><indexterm><primary>pg_stat_xact_all_tables</primary></indexterm></entry>
      <entry>Similaire à <structname>pg_stat_all_tables</structname>, mais
      décompte les actions prises dans la transaction en cours (qui ne
      sont <emphasis>pas</emphasis> encore pris en compte dans la vue
      <structname>pg_stat_all_tables</structname> et les vues du même
      type). Les colonnes correspondant au nombre de lignes vivantes et
      mortes, ainsi que celles pour les actions du VACUUM et de l'ANALYZE
      ne sont pas présentes dans cette vue.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_sys_tables</structname><indexterm><primary>pg_stat_xact_sys_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_xact_all_tables</structname>,
      sauf que seules les tables systèmes sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_user_tables</structname><indexterm><primary>pg_stat_xact_user_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_xact_all_tables</structname>,, sauf que seules les
      tables utilisateurs sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_all_indexes</structname><indexterm><primary>pg_stat_all_indexes</primary></indexterm></entry>
      <entry>Pour chaque index de la base de données en cours, l'OID de la
      table et de l'index, le nom du schéma, de la table et de l'index, le
      nombre de parcours d'index initiés sur cet index, le nombre d'entrées de
      l'index renvoyées par les parcours d'index, et le nombre de lignes actives
      de table récupérées par de simples parcours d'index utilisant cet index.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_sys_indexes</structname><indexterm><primary>pg_stat_sys_indexes</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_all_indexes</structname>, sauf que seules les
      tables systèmes sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_indexes</structname><indexterm><primary>pg_stat_user_indexes</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_all_indexes</structname>, sauf que seules
      les tables utilisateurs sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_tables</structname><indexterm><primary>pg_statio_all_tables</primary></indexterm></entry>
      <entry>Pour chaque table de la base de données en cours (ceci incluant les
      tables TOAST), l'OID de la table, le nom du schéma et de la table, le
      nombre de blocs disque lus à partir de cette table, le nombre de lectures
      tampon réussies dans tous les index de cette table, le nombre de blocs
      disque lus et de lectures tampon réussies à partir de la table TOAST
      (si elle existe), et, enfin, le nombre de blocs disque lus et le nombre
      de lectures tampon réussies à partir de l'index de la table TOAST.
      </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_tables</structname><indexterm><primary>pg_statio_sys_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_tables</structname>, sauf que seules
      les tables systèmes sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_tables</structname><indexterm><primary>pg_statio_user_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_tables</structname>, sauf que seules
      les tables utilisateur sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_indexes</structname><indexterm><primary>pg_statio_all_indexes</primary></indexterm></entry>
      <entry>Pour chaque index de la base de données en cours, l'OID de la table
      et de l'index, le nom du schéma, de la table et de l'index, le nombre
      de blocs disque lus et le nombre de lectures tampon réussies pour
      cet index.
      </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_indexes</structname><indexterm><primary>pg_statio_sys_indexes</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_indexes</structname>, sauf que seuls
      les index systèmes sont affichés.</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_indexes</structname><indexterm><primary>pg_statio_user_indexes</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_indexes</structname>, sauf que seuls
      les index utilisateur sont affichés.</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_sequences</structname><indexterm><primary>pg_statio_all_sequences</primary></indexterm></entry>
      <entry>Pour chaque séquence de la base de données en cours, l'OID de la
      séquence, le nom du schéma et de la séquence, le nombre de blocs disque
      lus et le nombre de lectures réussies du tampon pour cette séquence.
      </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_sequences</structname><indexterm><primary>pg_statio_sys_sequences</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_sequences</structname>, sauf que
      seules les séquences système sont affichées (actuellement, aucune
      séquence système n'est définie, donc cette vue est toujours vide)</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_sequences</structname><indexterm><primary>pg_statio_user_sequences</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_sequences</structname>, sauf que
      seules les séquences utilisateur sont affichées.</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_functions</structname><indexterm><primary>pg_stat_user_functions</primary></indexterm></entry>
      <entry>Pour les fonctions tracées, OID de la fonction, schéma, nom,
      nombre d'appels, temps total et temps de la fonction. Ce dernier est
      le temps passé uniquement dans la fonction. Le temps total inclus le
      temps passé dans les fonctions appelées. Les valeurs sont en
      millisecondes.
     </entry>
     </row>
     <row>
      <entry><structname>pg_stat_xact_user_functions</structname><indexterm><primary>pg_stat_xact_user_functions</primary></indexterm></entry>
      <entry>Similaire à <structname>pg_stat_user_functions</structname>,
      mais compte seulement les appels pendant la transaction en cours
      (qui ne sont <emphasis>pas</emphasis> encore inclus dans
      <structname>pg_stat_user_functions</structname>).</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   Les statistiques par index sont particulièrement utiles pour déterminer
   les index utilisés et leur efficacité.
  </para>

  <para>
   Les index peuvent être utilisés soit directement soit via des <quote>parcours de
   bitmap</quote>. Dans un parcours de bitmap, les résultats de plusieurs index
   peuvent être combinés via des règles AND ou OR&nbsp;; donc il est difficile
   d'associer des récupérations de lignes d'en-têtes individuelles avec des
   index spécifiques quand un parcours de bitmap est utilisé. Du coup, un
   parcours de bitmap incrémente le nombre dans
   <structname>pg_stat_all_indexes</structname>.<structfield>idx_tup_read</structfield>
   pour les index qu'il utilise et il incrémente le nombre
   <structname>pg_stat_all_tables</structname>.<structfield>idx_tup_fetch</structfield>
   pour la table, mais il n'affecte pas
   <structname>pg_stat_all_indexes</structname>.<structfield>idx_tup_fetch</structfield>.
  </para>

  <note>
   <para>
    Avant <productname>PostgreSQL</productname> 8.1, les totaux
    <structfield>idx_tup_read</structfield> et <structfield>idx_tup_fetch</structfield> étaient
    pratiquement toujours égaux. Maintenant, ils peuvent être différents même
    sans considérer les parcours de bitmap parce que
    <structfield>idx_tup_read</structfield> compte les entrées d'index récupérées à partir
    de l'index alors que <structfield>idx_tup_fetch</structfield> compte les lignes actives
    récupérées à partir de la table&nbsp;; ce dernier sera moindre si des lignes
    mortes ou pas-encore-validées sont récupérées en utilisant l'index.
   </para>
  </note>

  <para>
   Les vues <structname>pg_statio_</structname> sont principalement utiles pour
   déterminer l'efficacité du cache tampon. Quand le nombre de lectures disques
   réelles est plus petit que le nombre de récupérations valides par le tampon,
   alors le cache satisfait la plupart des demandes de lecture sans faire appel
   au noyau. Néanmoins, ces statistiques ne nous donnent pas l'histoire
   complète&nbsp;: à cause de la façon dont <productname>PostgreSQL</productname> gère les
   entrées/sorties disque, les données qui ne sont pas dans le tampon de
   <productname>PostgreSQL</productname> pourraient toujours résider dans le tampon
   d'entrées/sorties du noyau et pourraient, du coup, être toujours récupérées
   sans nécessiter une lecture physique. Les utilisateurs intéressés pour
   obtenir des informations plus détaillées sur le comportement des
   entrées/sorties dans <productname>PostgreSQL</productname> sont invités à utiliser le
   récupérateur de statistiques de <productname>PostgreSQL</productname> avec les outils du
   système d'exploitation permettant une vue de la gestion des
   entrées/sorties par le noyau.
  </para>

  <para>
   Il existe d'autres façons de regarder les statistiques. Cela se fait en
   écrivant des requêtes qui utilisent les mêmes fonctions d'accès aux
   statistiques que les vues standards. Ces fonctions sont listées
   dans le <xref linkend="monitoring-stats-funcs-table"/>. Les fonctions d'accès
   par base de données prennent un OID de la base de données comme argument pour
   identifier la base de données du rapport. Les fonctions par table et par
   index prennent l'OID de la table ou de l'index. Les fonctions des statistiques
   pour les appels de fonctions prennent un OID. (notez que seuls les tables
   et les index de la base de données en cours peuvent être vus par ces
   fonctions). Les fonctions d'accès au processus prennent le numéro
   d'identifiant du processus.
  </para>

  <table id="monitoring-stats-funcs-table">
   <title>Fonctions d'accès aux statistiques</title>

   <tgroup cols="3">
    <colspec colnum="1" colwidth="2.0*"/>
    <colspec colnum="2" colwidth="0.3*"/>
    <colspec colnum="3" colwidth="1.2*"/>
    <thead>
     <row>
      <entry>Fonction</entry>
      <entry>Code de retour</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal><function>pg_stat_get_db_numbackends</function>(<type>oid</type>)</literal></entry>
      <entry><type>integer</type></entry>
      <entry>
       Nombre de processus actifs pour la base de données
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_xact_commit</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de transactions validées dans la base de données
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_xact_rollback</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de transactions annulées dans la base de données
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_blocks_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de demandes de récupérations de blocs disque pour la base de
       données
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_blocks_hit</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de demandes de récupérations de blocs disque trouvés dans le
       tampon pour la base de données
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_tuples_returned</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes renvoyées pour la base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_tuples_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes récupérées pour la base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_tuples_inserted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes insérées dans la base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_tuples_updated</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes mises à jour dans la base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_tuples_deleted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes supprimées dans la base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_conflict_tablespace</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de requêtes annulées à cause d'un conflit dans la
       restauration avec des tablespaces supprimées
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_conflict_lock</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de requêtes annulées à cause d'un conflit dans la
       restauration avec des verrous
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_conflict_snapshot</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de requêtes annulées à cause d'un conflit dans la
       restauration avec d'anciennes images de base
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_conflict_bufferpin</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de requêtes annulées à cause d'un conflit dans la
       restauration avec des tampons verrouillés
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_conflict_startup_deadlock</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de requêtes annulées à cause d'un conflit dans la
       restauration avec des verrous mortels
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_db_stat_reset_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
       Horodatage de la dernière réinitialisation des statistiques pour
       la base de données. Initialisé à l'heure système lors de la
       première connexion à chaque base de données. L'heure de
       réinitialisation est mise à jour quand vous appelez
       <function>pg_stat_reset</function> sur la base de données, ainsi
       qu'après exécution de
       <function>pg_stat_reset_single_table_counters</function> sur
       une table ou un index.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_numscans</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de parcours séquentiels réalisés lorsque l'argument est une
       table, ou nombre de parcours d'index lorsque l'argument est un index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_returned</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes lues par les parcours séquentiels lorsque l'argument
       est une table, ou nombre de lignes d'index lues lorsque l'argument est un
       index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Le nombre de lignes de table récupérées par des parcours de bitmap quand
       l'argument est une table, ou les lignes de table récupérées par de
       simples parcours d'index en utilisant cet index quand l'argument est un
       index.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_inserted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes insérées dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_updated</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes mises à jour dans la table (incluant les mises à jour
	   via HOT)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_deleted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes supprimées dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_hot_updated</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes mises à jour via HOT dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_live_tuples</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes vivantes dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_dead_tuples</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes mortes dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_blocks_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de demandes de récupération de blocs disques pour la table ou
       l'index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_blocks_hit</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de demandes de blocs disque récupérés dans le tampon pour la
       table ou l'index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_tuples_deleted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes supprimées dans la table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_blocks_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de requêtes de récupération de blocs disque pour les tables ou index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_blocks_hit</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de requêtes de blocs disque trouvés en cache pour les tables ou index
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_last_vacuum_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
       Date/heure du dernier VACUUM (sans l'option <option>FULL</option>) survenu sur cette table à la demande de
       l'utilisateur
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_last_autovacuum_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
       Date/heure du dernier ANALYZE lancé par le démon autovacuum survenu sur
       cette table.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_last_analyze_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
       Date/heure du dernier VACUUM survenu sur cette table à la demande de
       l'utilisateur
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_last_autoanalyze_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
       Date/heure du dernier ANALYZE lancé par le démon autovacuum survenu sur
       cette table.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_vacuum_count</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de fois qu'un VACUUM non <option>FULL</option> a été
       exécuté manuellement sur cette table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_autovacuum_count</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de fois qu'un VACUUM a été exécuté automatiquement sur
       cette table par le démon autovacuum
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_analyze_count</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de fois qu'un ANALYZE a été exécuté manuellement sur cette
       table
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_autoanalyze_count</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de fois qu'un ANALYZE a été exécuté automatiquement sur
       cette table par le démon autovacuum
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_numscans</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de parcours séquentiels réalisés quand l'argument est une
       table, ou nombre de parcours d'index réalisés quand l'argument
       est un index, pour la transaction courante
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_tuples_returned</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes lues par des parcours séquentiels quand l'argument
       est une table, ou nombre d'entrées d'index renvoyées quand
       l'argument est un index, pour la transaction en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_tuples_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes de table récupérées par des parcours de bitmap
       quand l'argument est une table, ou nombre de lignes de table
       récupérées par des parcours simples d'index quand l'argument est
       un index, pour la transaction en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_tuples_inserted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes insérées dans la table, pour la transaction en
       cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_tuples_updated</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes mises à jour (incluant les mises à jour HOT) dans
       la table, pour la transaction en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_tuples_deleted</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes supprimées dans la table, pour la transaction en
       cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_tuples_hot_updated</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de lignes mises à jour via HOT dans la table, pour la
       transaction en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_blocks_fetched</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de demandes de lectures de blocs disques pour la table
       ou l'index, pour la transaction en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_blocks_hit</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de demandes de lectures de blocs disques pour la table
       ou l'index trouvés dans le cache, pour la transaction en cours
      </entry>
     </row>

     <row>
       <!-- See also the entry for this in func.sgml -->
      <entry><literal><function>pg_backend_pid()</function></literal></entry>
      <entry><type>integer</type></entry>
      <entry>
       ID du processus pour le processus serveur attaché à la session en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_activity</function>(<type>integer</type>)</literal></entry>
      <entry><type>setof record</type></entry>
      <entry>
       Renvoie un ensemble d'informations sur le processus serveur correspondant
       au PID indiqué, ou un enregistrement pour chaque processus serveur actif
       sur le système si le PID vaut NULL. Les champs renvoyés sont un
       sous-ensemble de ceux proposés par la vue <structname>pg_stat_activity</structname>
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_function_calls</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre d'appels de la fonction.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_function_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Temps passé dans la fonction, en microsecondes. Inclut le temps passé
       dans les fonctions appelées par cette fonction.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_function_self_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Temps passé uniquement dans cette fonction. Le temps passé dans les
       fonctions appelées est exclu.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_function_calls</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de fois où la fonction a été appelée, dans la transaction
       en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_function_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Temps passé dans la fonction, en microsecondes, pour la transaction
       en cours. Inclut le temps passé dans les fonctions appelées par
       cette fonction.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_xact_function_self_time</function>(<type>oid</type>)</literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Temps passé uniquement dans cette fonction pour la transaction en
       cours. Le temps passé dans les fonctions appelées est exclu.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_idset()</function></literal></entry>
      <entry><type>setof integer</type></entry>
      <entry>
       PID des processus serveurs actifs à ce moment (de 1 au nombre de processus
       serveurs actifs). Voir un exemple d'utilisation dans le texte.
      </entry>
     </row>
     
     <row>
      <entry><literal><function>pg_stat_get_backend_pid</function>(<type>integer</type>)</literal></entry>
      <entry><type>integer</type></entry>
      <entry>
       ID du processus pour le processus serveur donné
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_dbid</function>(<type>integer</type>)</literal></entry>
      <entry><type>oid</type></entry>
      <entry>
       ID de la base de données pour le processus serveur en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_userid</function>(<type>integer</type>)</literal></entry>
      <entry><type>oid</type></entry>
      <entry>
       ID de l'utilisateur pour le processus serveur en cours
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_activity</function>(<type>integer</type>)</literal></entry>
      <entry><type>text</type></entry>
      <entry>
       Commande active du processus serveur indiqué mais seulement si l'utilisateur
       courant est un superutilisateur ou le même utilisateur dont vient la commande
       (et que <varname>track_activities</varname> est activé)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_waiting</function>(<type>integer</type>)</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>
       True si le processus serveur indiqué attend un verrou mais seulement si l'utilisateur
       courant est un superutilisateur ou le même utilisateur dont vient la commande
       (et que <varname>track_activities</varname> est activé)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_activity_start</function>(<type>integer</type>)</literal></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>
       Date/heure du lancement de la requête en cours d'exécution sur le processus
       serveur indiqué, mais seulement si l'utilisateur courant est un
       superutilisateur ou le même utilisateur dont vient la commande (et que
       <varname>track_activities</varname> est activé)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_xact_start</function>(<type>integer</type>)</literal></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>
       Le moment auquel le processus serveur indiqué a été exécuté.
       Seulement si l'utilisateur est un superutilisateur ou le même utilisateur
       que celui qui a lancé la session (et que <varname>track_activities</varname>
       est activé)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_start</function>(<type>integer</type>)</literal></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>
       L'heure à laquelle le processus serveur donné a été lancé ou NULL si
       l'utilisateur en cours n'est ni un superutilisateur ni l'utilisateur
       de la session requêtée
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_client_addr</function>(<type>integer</type>)</literal></entry>
      <entry><type>inet</type></entry>
      <entry>
       L'adresse IP du client connecté au processus serveur donné. NULL si
       la connexion est établie sur un socket de domaine Unix. Aussi NULL si
       l'utilisateur en cours n'est ni un superutilisateur ni l'utilisateur
       de la session requêtée
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_client_port</function>(<type>integer</type>)</literal></entry>
      <entry><type>integer</type></entry>
      <entry>
       Le numéro de port TCP du client connecté au processus serveur donné. -1 si
       la connexion est établie sur un socket de domaine Unix. NULL si
       l'utilisateur en cours n'est ni un superutilisateur ni l'utilisateur
       de la session requêtée
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_timed_checkpoints()</function></literal></entry>
       <entry><type>bigint</type></entry>
       <entry>
        Le nombre de fois où le processus d'écriture en tâche de fond a lancé des points de vérification
	planifiés (donc parce que <varname>checkpoint_timeout</varname> est
	arrivé à expiration)
       </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_requested_checkpoints()</function></literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de fois où le processus d'écriture en tâche de fond a lancé des points de vérification en se
       basant sur les demandes des processus serveur parce que
       <varname>checkpoint_segments</varname> a été dépassé ou parce que la
       commande <command>CHECKPOINT</command> a été lancée
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_buf_written_checkpoints()</function></literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de tampons écrits par le processus d'écriture en tâche de fond lors de points de vérification
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_buf_written_clean()</function></literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de tampons écrits par le processus d'écriture en tâche de fond pour le nettoyage de routine
       des pages sales
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_maxwritten_clean()</function></literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de fois où le processus d'écriture en tâche de fond est arrêté son parcours de nettoyage parce
       qu'il a écrit plus de tampons que ce qui est spécifié par le paramètre
       <varname>bgwriter_lru_maxpages</varname>
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_bgwriter_stat_reset_time()</function></literal></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
        Horodatage de la dernière réinitialisation des statistiques pour
        le processus d'écriture en tâche de fond, mis à jour lors de
        l'exécution de <function>pg_stat_reset_shared('bgwriter')</function>
        sur l'instance.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_buf_written_backend()</function></literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Nombre de tampons écrits par les processus serveur parce qu'ils ont
       besoin d'allouer un nouveau tampon
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_buf_alloc()</function></literal></entry>
      <entry><type>bigint</type></entry>
      <entry>
       Le nombre total d'allocations de tampons
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_wal_senders()</function></literal></entry>
      <entry><type>setof record</type></entry>
      <entry>
       Un enregistrement pour chaque processus walsender actif. Les champs
       renvoyés sont un sous-ensemble de ceux disponibles dans la vue
       <structname>pg_stat_replication</structname>.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_clear_snapshot()</function></literal></entry>
      <entry><type>void</type></entry>
      <entry>
       Annule l'image statistique actuelle
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_reset()</function></literal></entry>
      <entry><type>void</type></entry>
      <entry>
       Réinitialise à zéro tous les compteurs statistiques pour la base de
       données actuelle (nécessite les droits superutilisateur)
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_reset_shared</function>(text)</literal></entry>
      <entry><type>void</type></entry>
      <entry>
       Réinitialise des compteurs de statistiques partagés pour le cluster de
       base de données à zéro (nécessite les droits du superutilisateur).
       Appeler <literal>pg_stat_reset_shared('bgwriter')</literal> mettra à
       zéro toutes les valeurs affichées par
       <structname>pg_stat_bgwriter</structname>.
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_reset_single_table_counters</function>(oid)</literal></entry>
      <entry><type>void</type></entry>
      <entry>
       Réinitialise les statistiques pour une table ou un index particulier
       dans la base de données en cours (nécessite les droits du
       superutilisateur).
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_reset_single_function_counters</function>(oid)</literal></entry>
      <entry><type>void</type></entry>
      <entry>
       Réinitialise les statistiques pour une fonction particulière dans la
       base de données en cours (nécessite les droits du superutilisateur).
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

   <note>
    <para>
     <function>pg_stat_get_blocks_fetched</function> moins
     <function>pg_stat_get_blocks_hit</function> donne le nombre d'appels
     lancés pour la table, l'index ou la base de données&nbsp;; mais le nombre 
     de lectures physiques réelles est habituellement moindre à cause des tampons
     du noyau. Les colonnes statistiques <literal>*_blks_read</literal>
     utilisent cette soustraction, c'est-à-dire lus en cache soustrait aux lus
     sur disque.
    </para>
   </note>

  <para>
   Toutes les fonctions accédant aux informations sur les processus sont indexées
   par numéro d'identifiant, sauf que <function>pg_stat_get_activity</function>
   est indexé par PID.
   La fonction <function>pg_stat_get_backend_idset</function> fournit un moyen
   agréable de générer une ligne pour chaque processus serveur actif. Par
   exemple, pour afficher les <acronym>PID</acronym> et les requêtes en cours pour
   tous les processus serveur&nbsp;:

<programlisting>SELECT pg_stat_get_backend_pid(s.backendid) AS procpid,
       pg_stat_get_backend_activity(s.backendid) AS current_query
    FROM (SELECT pg_stat_get_backend_idset() AS backendid) AS s;</programlisting>
  </para>

 </sect2>
 </sect1>

 <sect1 id="monitoring-locks">
  <title>Visualiser les verrous</title>

  <indexterm zone="monitoring-locks">
   <primary>verrou</primary>
   <secondary>surveillance</secondary>
  </indexterm>

  <para>
   Un autre outil utile pour surveiller l'activité des bases de données est la
   table système <structname>pg_locks</structname>. Elle permet à
   l'administrateur système de visualiser des informations sur les verrous
   restant dans le gestionnaire des verrous. Par exemple, cette fonctionnalité
   peut être utilisée pour&nbsp;:
	
   <itemizedlist>
    <listitem>
     <para>
      Visualiser tous les verrous en cours, tous les verrous sur les relations
      d'une base de données particulière ou tous les verrous détenus par une
      session <productname>PostgreSQL</productname> particulière.
     </para>
    </listitem>

    <listitem>
     <para>
      Déterminer la relation de la base de données disposant de la plupart des
      verrous non autorisés (et qui, du coup, pourraient être une source de
      contention parmi les clients de la base de données).
     </para>
    </listitem>

    <listitem>
     <para>
      Déterminer l'effet de la contention des verrous sur les performances
      générales des bases de données, ainsi que l'échelle dans laquelle varie la
      contention sur le trafic de la base de données.
     </para>
    </listitem>
   </itemizedlist>

   Les détails sur la vue <structname>pg_locks</structname> apparaissent dans la
   <xref linkend="view-pg-locks"/>. Pour plus d'informations sur les verrous et
   la gestion des concurrences avec <productname>PostgreSQL</productname>,
   référez-vous au <xref linkend="mvcc"/>.
  </para>
 </sect1>

 <sect1 id="dynamic-trace">
  <title>Traces dynamiques</title>

 <indexterm zone="dynamic-trace">
  <primary>DTrace</primary>
 </indexterm>

  <para>
   <productname>PostgreSQL</productname> fournit un support pour les traces
   dynamiques du serveur de bases de données. Ceci permet l'appel à un outil
   externe à certains points du code pour tracer son exécution.
  </para>

  <para>
   Un certain nombre de sondes et de points de traçage sont déjà insérés dans
   le code source. Ces sondes ont pour but d'être utilisées par des développeurs
   et des administrateurs de base de données. Par défaut, les sondes ne sont pas
   compilées dans <productname>PostgreSQL</productname>&nbsp;; l'utilisateur a
   besoin de préciser explicitement au script configure de rendre disponible
   les sondes.
  </para>

  <para>
   Actuellement, seul l'outil <ulink
   url="http://opensolaris.org/os/community/dtrace/">DTrace</ulink>, disponible
   sur OpenSolaris, Solaris 10 et Mac OS X Leopard, est supporté. DTrace devrait
   être disponible pour FreeBSD dans le futur et peut-être pour d'autres systèmes
   d'exploitation.Le projet <ulink
   url="http://sourceware.org/systemtap/">SystemTap</ulink> pour Linux fournit
   aussi un équivalent DTrace. Le support d'autres outils de traces dynamiques
   est possible théoriquement en modifiant les définitions des macros dans
   <filename>src/include/utils/probes.h</filename>.
  </para>

  <sect2 id="compiling-for-trace">
   <title>Compiler en activant les traces dynamiques</title>

  <para>
   Par défaut, les sondes ne sont pas disponibles, donc vous aurez besoin d'indiquer
   explicitement au script configure de les activer dans
   <productname>PostgreSQL</productname>. Pour inclure le support de DTrace,
   ajoutez <option>--enable-dtrace</option> aux options de configure. Lire
   <xref linkend="install-procedure"/> pour plus d'informations.
  </para>
  </sect2>

  <sect2 id="trace-points">
   <title>Sondes disponibles</title>

  <para>
   Un certain nombre de sondes standards sont fournies dans le code source,
   comme indiqué dans <xref linkend="dtrace-probe-point-table"/>. <xref
   linkend="typedefs-table"/> précise les types utilisés dans les sondes.
   D'autres peuvent être ajoutées pour améliorer la surveillance de
   <productname>PostgreSQL</productname>.
  </para>

 <table id="dtrace-probe-point-table">
  <title>Sondes disponibles pour DTrace</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Nom</entry>
     <entry>Paramètres</entry>
     <entry>Aperçu</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry>transaction-start</entry>
     <entry>(LocalTransactionId)</entry>
     <entry>Sonde qui se déclenche au lancement d'une nouvelle transaction.
      arg0 est l'identifiant de transaction.</entry>
    </row>
    <row>
     <entry>transaction-commit</entry>
     <entry>(LocalTransactionId)</entry>
     <entry>Sonde qui se déclenche quand une transaction se termine avec succès.
      arg0 est l'identifiant de transaction.</entry>
    </row>
    <row>
     <entry>transaction-abort</entry>
     <entry>(LocalTransactionId)</entry>
     <entry>Sonde qui se déclenche quand une transaction échoue.
      arg0 est l'identifiant de transaction.</entry>
    </row>
    <row>
     <entry>query-start</entry>
     <entry>(const char *)</entry>
     <entry>Sonde qui se déclenche lorsque le traitement d'une requête commence.
      arg0 est la requête.</entry>
    </row>
    <row>
     <entry>query-done</entry>
     <entry>(const char *)</entry>
     <entry>Sonde qui se déclenche lorsque le traitement d'une requête se termine.
      arg0 est la requête.</entry>
    </row>
    <row>
     <entry>query-parse-start</entry>
     <entry>(const char *)</entry>
     <entry>Sonde qui se déclenche lorsque l'analyse d'une requête commence.
      arg0 est la requête.</entry>
    </row>
    <row>
     <entry>query-parse-done</entry>
     <entry>(const char *)</entry>
     <entry>Sonde qui se déclenche lorsque l'analyse d'une requête se termine.
      arg0 est la requête.</entry>
    </row>
    <row>
     <entry>query-rewrite-start</entry>
     <entry>(const char *)</entry>
     <entry>Sonde qui se déclenche lorsque la ré-écriture d'une requête commence.
      arg0 est la requête.</entry>
    </row>
    <row>
     <entry>query-rewrite-done</entry>
     <entry>(const char *)</entry>
     <entry>Sonde qui se déclenche lorsque la ré-écriture d'une requête se termine.
      arg0 est la requête.</entry>
    </row>
    <row>
     <entry>query-plan-start</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche lorsque la planification d'une requête commence.</entry>
    </row>
    <row>
     <entry>query-plan-done</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche lorsque la planification d'une requête se termine.</entry>
    </row>
    <row>
     <entry>query-execute-start</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche lorsque l'exécution d'une requête commence.</entry>
    </row>
    <row>
     <entry>query-execute-done</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche lorsque l'exécution d'une requête se termine.</entry>
    </row>
    <row>
     <entry>statement-status</entry>
     <entry>(const char *)</entry>
     <entry>Sonde qui se déclenche à chaque fois que le processus serveur met à
      jour son statut dans
      <structname>pg_stat_activity</structname>.<structfield>current_query</structfield>.
      arg0 est la nouvelle chaîne de statut.</entry>
    </row>
    <row>
     <entry>checkpoint-start</entry>
     <entry>(int)</entry>
     <entry>Sonde qui se déclenche quand un point de retournement commence son
      exécution.
      arg0 détient les drapeaux bit à bit utilisés pour distingurer les
      différents types de points de retournement, comme un point suite à un
      arrêt, un point immédiat ou un point forcé.</entry>
    </row>
    <row>
     <entry>checkpoint-done</entry>
     <entry>(int, int, int, int, int)</entry>
     <entry>Sonde qui se déclenche quand un point de retournement a terminé son
      exécution (les sondes listées après se déclenchent en séquence lors du
      traitement d'un point de retournement).
      arg0 est le nombre de tampons mémoires écrits. arg1 est le nombre total
      de tampons mémoires. arg2, arg3 et arg4 contiennent respectivement le
      nombre de journaux de transactions ajoutés, supprimés et recyclés.</entry>
    </row>
    <row>
     <entry>clog-checkpoint-start</entry>
     <entry>(bool)</entry>
     <entry>Sonde qui se déclenche quand la portion CLOG d'un point de
      retournement commence.
      arg0 est true pour un point de retournement normal, false pour un point
      de retournement suite à un arrêt.</entry>
    </row>
    <row>
     <entry>clog-checkpoint-done</entry>
     <entry>(bool)</entry>
     <entry>Sonde qui se déclenche quand la portion CLOG d'un point de
      retournement commence.
      arg0 a la même signification que pour clog-checkpoint-start.</entry>
    </row>
    <row>
     <entry>subtrans-checkpoint-start</entry>
     <entry>(bool)</entry>
     <entry>Sonde qui se déclenche quand la portion SUBTRANS d'un point de
      retournement commence.
      arg0 est true pour un point de retournement normal, false pour un point
      de retournement suite à un arrêt.</entry>
    </row>
    <row>
     <entry>subtrans-checkpoint-done</entry>
     <entry>(bool)</entry>
     <entry>Sonde qui se déclenche quand la portion SUBTRANS d'un point de
      retournement se termine.
      arg0 a la même signification que pour subtrans-checkpoint-start.</entry>
    </row>
    <row>
     <entry>multixact-checkpoint-start</entry>
     <entry>(bool)</entry>
     <entry>Sonde qui se déclenche quand la portion MultiXact d'un point de
      retournement commence.
      arg0 est true pour un point de retournement normal, false pour un point
      de retournement suite à un arrêt.</entry>
    </row>
    <row>
     <entry>multixact-checkpoint-done</entry>
     <entry>(bool)</entry>
     <entry>Sonde qui se déclenche quand la portion MultiXact d'un point de
      retournement se termine.
      arg0 a la même signification que pour multixact-checkpoint-start.</entry>
    </row>
    <row>
     <entry>buffer-checkpoint-start</entry>
     <entry>(int)</entry>
     <entry>Sonde qui se déclenche quand la portion d'écriture de tampons d'un
      point de retournement commence.
      arg0 contient les drapeaux bit à bit pour distinguer différents types de
      point de retournement comme le point après arrêt, un point immédiat, un
      point forcé.</entry>
    </row>
    <row>
     <entry>buffer-sync-start</entry>
     <entry>(int, int)</entry>
     <entry>Sonde qui se déclenche quand nous commençons d'écrire les tampons
      modifiés pendant un point de retournement (après identification des
      tampons qui doivent être écrits).
      arg0 est le nombre total de tampons.
      arg1 est le nombre de tampons qui sont modifiés et n'ont pas besoin
      d'être écrits.</entry>
    </row>
    <row>
     <entry>buffer-sync-written</entry>
     <entry>(int)</entry>
     <entry>Sonde qui se déclenche après chaque écriture d'un tampon lors d'un
      point de retournement.
      arg0 est le numéro d'identifiant du tampon.</entry>
    </row>
    <row>
     <entry>buffer-sync-done</entry>
     <entry>(int, int, int)</entry>
     <entry>Sonde qui se déclenche quand tous les tampons modifiés ont été
      écrits.
      arg0 est le nombre total de tampons.
      arg1 est le nombre de tampons réellement écrits par le processus de point
      de retournement.
      arg2 est le nombre attendu de tampons à écrire (arg1 de
      buffer-sync-start)&nbsp;; toute différence reflète d'autres processus
      écrivant des tampons lors du point de retournement.</entry>
    </row>
    <row>
     <entry>buffer-checkpoint-sync-start</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche une fois les tampons modifiés écrits par le
      noyau et avant de commencer à lancer des requêtes fsync.</entry>
    </row>
    <row>
     <entry>buffer-checkpoint-done</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche après la fin de la synchronisation des
     tampons sur le disque.</entry>
    </row>
    <row>
     <entry>twophase-checkpoint-start</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche quand la portion deux-phases d'un point de
      retournement est commencée.</entry>
    </row>
    <row>
     <entry>twophase-checkpoint-done</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche quand la portion deux-phases d'un point de
      retournement est terminée.</entry>
    </row>
    <row>
     <entry>buffer-read-start</entry>
     <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, bool)</entry>
     <entry>Sonde qui se déclenche quand la lecture d'un tampon commence.
      arg0 et arg1 contiennent les numéros de fork et de bloc de la page (arg1
      vaudra -1 s'il s'agit de demande d'extension de la relation).
      arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
      base de données et de la relation identifiant ainsi précisément la
      relation.
      arg5 est l'identifiant du processus moteur qui a créé la relation
      temporaire pour un tampon local ou InvalidBackendId (-1) pour un
      tampon partagé.
      arg6 est true pour une demande d'extension de la relation, false pour
      une lecture ordinaire.</entry>
    </row>
    <row>
     <entry>buffer-read-done</entry>
     <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, bool, bool)</entry>
     <entry>Sonde qui se déclenche quand la lecture d'un tampon se termine.
      arg0 et arg1 contiennent les numéros de fork et de bloc de la page (arg1
      contient le numéro de bloc du nouveau bloc ajouté s'il s'agit de demande
      d'extension de la relation).
      arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
      base de données et de la relation identifiant ainsi précisément la
      relation.
      arg5 est l'identifiant du processus moteur qui a créé la relation
      temporaire pour un tampon local ou InvalidBackendId (-1) pour un
      tampon partagé.
      arg6 est true pour une demande d'extension de la relation, false pour
      une lecture ordinaire.
      arg7 est true si la tampon était disponible en mémoire, false sinon.</entry>
    </row>
    <row>
     <entry>buffer-flush-start</entry>
     <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid)</entry>
     <entry>Sonde qui se déclenche avant de lancer une demande d'écriture pour
      un bloc partagé.
      arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
      base de données et de la relation identifiant ainsi précisément la
      relation.</entry>
    </row>
    <row>
     <entry>buffer-flush-done</entry>
     <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid)</entry>
     <entry>Sonde qui se déclenche quand une demande d'écriture se termine.
      (Notez que ceci ne reflète que le temps passé pour fournir la donnée au
      noyau&nbsp;; ce n'est habituellement pas encore écrit sur le disque.)
      Les arguments sont identiques à ceux de buffer-flush-start.</entry>
    </row>
    <row>
     <entry>buffer-write-dirty-start</entry>
     <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid)</entry>
     <entry>Sonde qui se déclenche quand un processus serveur commence à écrire
      un tampon modifié sur disque. Si cela arrive souvent, cela implique que
      <xref linkend="guc-shared-buffers"/> est trop petit ou que les paramètres
      de contrôle de bgwriter ont besoin d'un ajustement.)
      arg0 et arg1 contiennent les numéros de fork et de bloc de la page.
      arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
      base de données et de la relation identifiant ainsi précisément la
      relation.</entry>
    </row>
    <row>
     <entry>buffer-write-dirty-done</entry>
     <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid)</entry>
     <entry>Sonde qui se déclenche quand l'écriture d'un tampon modifié est
      terminé.
      Les arguments sont identiques à ceux de buffer-write-dirty-start.</entry>
    </row>
    <row>
     <entry>wal-buffer-write-dirty-start</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche quand un processus serveur commence à écrire
      un tampon modifié d'un journal de transactions parce qu'il n'y a plus
      d'espace disponible dans le cache des journaux de transactions. (Si cela
      arrive souvent, cela implique que <xref linkend="guc-wal-buffers"/> est
      trop petit.)</entry>
    </row>
    <row>
     <entry>wal-buffer-write-dirty-done</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche quand l'écriture d'un tampon modifié d'un
      journal de transactions est terminé.</entry>
    </row>
    <row>
     <entry>xlog-insert</entry>
     <entry>(unsigned char, unsigned char)</entry>
     <entry>Sonde qui se déclenche quand un enregistrement est inséré dans un
      journal de transactions.
      arg0 est le gestionnaire de ressource (rmid) pour l'enregistrement.
      arg1 contient des informations supplémentaires.</entry>
    </row>
    <row>
     <entry>xlog-switch</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche quand une bascule du journal de transactions
      est demandée.</entry>
    </row>
    <row>
     <entry>smgr-md-read-start</entry>
     <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int)</entry>
     <entry>Sonde qui se déclenche au début de la lecture d'un bloc d'une
     relation.
      arg0 et arg1 contiennent les numéros de fork et de bloc de la page.
      arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
      base de données et de la relation identifiant ainsi précisément la
      relation.
      arg5 est l'identifiant du processus moteur qui a créé la relation
      temporaire pour un tampon local ou InvalidBackendId (-1) pour un
      tampon partagé.</entry>
    </row>
    <row>
     <entry>smgr-md-read-done</entry>
     <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, int, int)</entry>
     <entry>Sonde qui se déclenche à la fin de la lecture d'un bloc.
      arg0 et arg1 contiennent les numéros de fork et de bloc de la page.
      arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
      base de données et de la relation identifiant ainsi précisément la
      relation.
      arg5 est l'identifiant du processus moteur qui a créé la relation
      temporaire pour un tampon local ou InvalidBackendId (-1) pour un
      tampon partagé.
      arg6 est le nombre d'octets réellement lus alors que arg7 est le nombre
      d'octets demandés (s'il y a une différence, il y a un problème).</entry>
    </row>
    <row>
     <entry>smgr-md-write-start</entry>
     <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int)</entry>
     <entry>Sonde qui se déclenche au début de l'écriture d'un bloc dans une
      relation.
      arg0 et arg1 contiennent les numéros de fork et de bloc de la page.
      arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
      base de données et de la relation identifiant ainsi précisément la
      relation.
      arg5 est l'identifiant du processus moteur qui a créé la relation
      temporaire pour un tampon local ou InvalidBackendId (-1) pour un
      tampon partagé.</entry>
    </row>
    <row>
     <entry>smgr-md-write-done</entry>
     <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, int, int)</entry>
     <entry>Sonde qui se déclenche à la fin de l'écriture d'un bloc.
      arg0 et arg1 contiennent les numéros de fork et de bloc de la page.
      arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
      base de données et de la relation identifiant ainsi précisément la
      relation.
      arg5 est l'identifiant du processus moteur qui a créé la relation
      temporaire pour un tampon local ou InvalidBackendId (-1) pour un
      tampon partagé.
      arg6 est le nombre d'octets réellement écrits alors que arg7 est le nombre
      d'octets demandés (si ces nombres sont différents, cela indique un
      problème).</entry>
    </row>
    <row>
     <entry>sort-start</entry>
     <entry>(int, bool, int, int, bool)</entry>
     <entry>Sonde qui se déclenche quand une opération de tri est démarré.
      arg0 indique un tri de la table, de l'index ou d'un datum.
      arg1 est true si on force les valeurs uniques.
      arg2 est le nombre de colonnes clés.
      arg3 est le nombre de Ko de mémoire autorisé pour ce travail.
      arg4 est true si un accès aléatoire au résultat du tri est requis.</entry>
    </row>
    <row>
     <entry>sort-done</entry>
     <entry>(bool, long)</entry>
     <entry>Sonde qui se déclenche quand un tri est terminé.
      arg0 est true pour un tri externe, false pour un tri interne.
      arg1 est le nombre de blocs disque utilisés pour un tri externe, ou le
      nombre de Ko de mémoire utilisés pour un tri interne.</entry>
    </row>
    <row>
     <entry>lwlock-acquire</entry>
     <entry>(LWLockId, LWLockMode)</entry>
     <entry>Sonde qui se déclenche quand un LWLock a été acquis.
      arg0 est l'identifiant du LWLock.
      arg1 est le mode de verrou demandé, soit exclusif soit partagé.</entry>
    </row>
    <row>
     <entry>lwlock-release</entry>
     <entry>(LWLockId)</entry>
     <entry>Sonde qui se déclenche quand un LWLock a été relâché (mais notez
      que tout processus en attente n'a pas encore été réveillé).
      arg0 est l'identifiant du LWLock.</entry>
    </row>
    <row>
     <entry>lwlock-wait-start</entry>
     <entry>(LWLockId, LWLockMode)</entry>
     <entry>Sonde qui se déclenche quand un LWLock n'était pas immédiatement
      disponible et qu'un processus serveur a commencé à attendre la
      disponibilité du verrou.
      arg0 est l'identifiant du LWLock.
      arg1 est le mode de verrou demandé, soit exclusif soit partagé.</entry>
    </row>
    <row>
     <entry>lwlock-wait-done</entry>
     <entry>(LWLockId, LWLockMode)</entry>
     <entry>Sonde qui se déclenche quand un processus serveur n'est plus en
      attente d'un LWLock (il n'a pas encore le verrou).
      arg0 est l'identifiant du LWLock.
      arg1 est le mode de verrou demandé, soit exclusif soit partagé.</entry>
    </row>
    <row>
     <entry>lwlock-condacquire</entry>
     <entry>(LWLockId, LWLockMode)</entry>
     <entry>Sonde qui se déclenche quand un LWLock a été acquis avec succès
      malgré le fait que l'appelant ait demandé de ne pas attendre.
      arg0 est l'identifiant du LWLock.
      arg1 est le mode de verrou demandé, soit exclusif soit partagé.</entry>
    </row>
    <row>
     <entry>lwlock-condacquire-fail</entry>
     <entry>(LWLockId, LWLockMode)</entry>
     <entry>Sonde qui se déclenche quand un LWLock, demandé sans attente, n'est
      pas accepté.
      arg0 est l'identifiant du LWLock.
      arg1 est le mode de verrou demandé, soit exclusif soit partagé.</entry>
    </row>
    <row>
     <entry>lock-wait-start</entry>
     <entry>(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, LOCKMODE)</entry>
     <entry>Sonde qui se déclenche quand une demande d'un gros verrou
      (<foreignphrase>lmgr lock</foreignphrase>) a commencé l'attente parce que
      le verrou n'était pas disponible.
      arg0 à arg3 sont les chmps identifiant l'objet en cours de verrouillage.
      arg4 indique le type d'objet à verrouiller.
      arg5 indique le type du verrou demandé.</entry>
    </row>
    <row>
     <entry>lock-wait-done</entry>
     <entry>(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, LOCKMODE)</entry>
     <entry>Sonde qui se déclenche quand une demande d'un gros verrou
      (<foreignphrase>lmgr lock</foreignphrase>) a fini d'attendre (c'est-à-dire
      que le verrou a été accepté).
      Les arguments sont identiques à ceux de lock-wait-start.</entry>
    </row>
    <row>
     <entry>deadlock-found</entry>
     <entry>()</entry>
     <entry>Sonde qui se déclenche quand un verrou mortel est trouvé par le
      détecteur.</entry>
    </row>

   </tbody>
   </tgroup>
  </table>

 <table id="typedefs-table">
  <title>Types définis utilisés comme paramètres de sonde</title>
  <tgroup cols="2">
   <thead>
    <row>
     <entry>Type</entry>
     <entry>Definition</entry>
    </row>
   </thead>

   <tbody>

    <row>
     <entry>LocalTransactionId</entry>
     <entry>unsigned int</entry>
    </row>
    <row>
     <entry>LWLockId</entry>
     <entry>int</entry>
    </row>
    <row>
     <entry>LWLockMode</entry>
     <entry>int</entry>
    </row>
    <row>
     <entry>LOCKMODE</entry>
     <entry>int</entry>
    </row>
    <row>
     <entry>BlockNumber</entry>
     <entry>unsigned int</entry>
    </row>
    <row>
     <entry>Oid</entry>
     <entry>unsigned int</entry>
    </row>
    <row>
     <entry>ForkNumber</entry>
     <entry>int</entry>
    </row>
    <row>
     <entry>bool</entry>
     <entry>char</entry>
    </row>

   </tbody>
   </tgroup>
  </table>
  </sect2>

  <sect2 id="using-trace-points">
   <title>Utiliser les sondes</title>

  <para>
   L'exemple ci-dessous montre un script DTrace pour l'analyse du nombre de
   transactions sur le système, comme alternative à l'interrogation régulière
   de <structname>pg_stat_database</structname> avant et après un test de
   performance&nbsp;:
<programlisting>#!/usr/sbin/dtrace -qs 

postgresql$1:::transaction-start
{
      @start["Start"] = count();
      self->ts  = timestamp;
}

postgresql$1:::transaction-abort
{
      @abort["Abort"] = count();
}

postgresql$1:::transaction-commit
/self->ts/
{
      @commit["Commit"] = count();
      @time["Total time (ns)"] = sum(timestamp - self->ts);
      self->ts=0;
}
</programlisting>
   À son exécution, le script de l'exemple D donne une sortie comme&nbsp;:
<screen># ./txn_count.d `pgrep -n postgres` or ./txn_count.d &lt;PID&gt;
^C

Start                                          71
Commit                                         70
Total time (ns)                        2312105013
</screen>
  </para>

  <note>
   <para>
    SystemTap utilise une notation différente de DTrace pour les scripts de
    trace, même si les points de trace sont compatibles. Il est intéressant de
    noter que, lorsque nous avons écrit ce texte, les scripts SystemTap doivent
    référencer les noms des sondes en utilisant des tirets bas doubles à la
    place des tirets simples. Il est prévu que les prochaines versions de
    SystemTap corrigent ce problème.
   </para>
  </note>

  <para>
   Vous devez vous rappeler que les programmes DTrace doivent être écrits
   soigneusement, sinon les informations récoltées pourraient ne rien valoir.
   Dans la plupart des cas où des problèmes sont découverts, c'est
   l'instrumentation qui est erronée, pas le système sous-jacent. En discutant
   des informations récupérées en utilisant un tel système, il est essentiel de
   s'assurer que le script utilisé est lui-aussi vérifié et discuter.
  </para>
  <para>
   D'autres exemples de scripts sont disponibles dans le <ulink
   url="http://pgfoundry.org/projects/dtrace/">projet dtrace</ulink> de PgFoundry.
  </para>
  </sect2>

  <sect2 id="defining-trace-points">
   <title>Définir de nouvelles sondes</title>

  <para>
   De nouvelles sondes peuvent être définies dans le code partout où le
   développeur le souhaite bien que cela nécessite une nouvelle compilation.
   Voici les étapes nécessaires pour insérer de nouvelles sondes&nbsp;:
  </para>

  <procedure>
   <step>
    <para>
     Décider du nom de la sonde et des données nécessaires pour la sonde
    </para>
   </step>

   <step>
    <para>
     Ajoutez les définitions de sonde dans
     <filename>src/backend/utils/probes.d</filename>
    </para>
   </step>

   <step>
    <para>
     Inclure <filename>pg_trace.h</filename> s'il n'est pas déjà présent dans le
     module contenant les points de sonde, et insérer les macros
     <literal>TRACE_POSTGRESQL</literal> aux emplacements souhaités dans le code
     source
    </para>
   </step>

   <step>
    <para>
     Recompiler et vérifier que les nouvelles sondes sont disponibles
    </para>
   </step>
  </procedure>

  <formalpara>
   <title>Exemple&nbsp;:</title>
   <para>
    Voici un exemple d'ajout d'une sonde pour tracer toutes les nouvelles
    transactions par identifiant de transaction.
   </para>
  </formalpara>

  <procedure>
   <step>
    <para>
     La sonde sera nommée <literal>transaction-start</literal> et nécessite
     un paramètre de type LocalTransactionId
    </para>
   </step>

   <step>
    <para>
     Ajout de la définition de la sonde dans
     <filename>src/backend/utils/probes.d</filename>&nbsp;:
<programlisting>
      probe transaction__start(LocalTransactionId);
</programlisting>
     Notez l'utilisation du double tiret bas dans le nom de la sonde. Dans un
     script DTrace utilisant la sonde, le double tiret bas doit être remplacé
     par un tiret, donc <literal>transaction-start</literal> est le nom à
     documenter pour les utilisateurs.
    </para>
   </step>

   <step>
    <para>
     Au moment de la compilation, <literal>transaction__start</literal> est
     converti en une macro appelée <literal>TRACE_POSTGRESQL_TRANSACTION_START</literal>
     (notez que les tirets bas ne sont plus doubles ici), qui est disponible
     en incluant le fichier <filename>pg_trace.h</filename>. Il faut ajouter
     l'appel à la macro aux bons emplacements dans le code source. Dans ce
     cas, cela ressemble à&nbsp;:

<programlisting>
    TRACE_POSTGRESQL_TRANSACTION_START(vxid.localTransactionId);
</programlisting>
    </para>
   </step>

   <step>
    <para>
     Après une nouvelle compilation et l'exécution du nouveau binaire, il
     faut vérifier que la nouvelle sonde est disponible en exécutant la
     commande DTrace suivante. Vous deviez avoir cette sortie&nbsp;:
<screen>
# dtrace -ln transaction-start
   ID    PROVIDER          MODULE           FUNCTION NAME
18705 postgresql49878     postgres     StartTransactionCommand transaction-start
18755 postgresql49877     postgres     StartTransactionCommand transaction-start
18805 postgresql49876     postgres     StartTransactionCommand transaction-start
18855 postgresql49875     postgres     StartTransactionCommand transaction-start
18986 postgresql49873     postgres     StartTransactionCommand transaction-start
</screen>
    </para>
   </step>
  </procedure>

  <para>
   Il faut faire attention à d'autres choses lors de l'ajout de macros de
   trace dans le code C&nbsp;:

   <itemizedlist>
    <listitem>
     <para>
      Vous devez faire attention au fait que les types de données indiqués
      pour les paramètres d'une sonde correspondent aux types de données des
      variables utilisées dans la macro. Dans le cas contraire, vous obtiendrez
      des erreurs de compilation.
     </para>
    </listitem>


    <listitem>
     <para>
      Sur la plupart des platformes, si <productname>PostgreSQL</productname>
      est construit avec <option>--enable-dtrace</option>, les arguments pour
      une macro de trace seront évalués à chaque fois que le contrôle passe
      dans la macro, <emphasis>même si aucun traçage n'est réellement en
      cours</emphasis>. Cela a généralement peu d'importance si vous rapportez
      seulement les valeurs de quelques variables locales mais faites bien
      attention à l'utilisation de fonctions coûteuses. Si vous devez le faire,
      pensez à protéger la macro avec une vérification pour vous assurer que
      la trace est bien activée&nbsp;:

<programlisting>
    if (TRACE_POSTGRESQL_TRANSACTION_START_ENABLED())
        TRACE_POSTGRESQL_TRANSACTION_START(some_function(...));
</programlisting>

      Chaque macro de trace a une macro <literal>ENABLED</literal>
      correspondante.
     </para>
    </listitem>
   </itemizedlist>

  </para>

  </sect2>

 </sect1>

</chapter>
