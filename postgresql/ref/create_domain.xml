<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060618 -->

<refentry id="sql-createdomain">
 <refmeta>
  <refentrytitle>CREATE DOMAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE DOMAIN</refname>
  <refpurpose>Définir un nouveau domaine</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>CREATE DOMAIN <replaceable class="parameter">nom</replaceable> [AS] <replaceable class="parameter">type_donnee</replaceable>
    [ COLLATE <replaceable>collation</replaceable> ]
    [ DEFAULT <replaceable>expression</replaceable> ]
    [ <replaceable class="parameter">contrainte</replaceable> [ ... ] ]

<phrase>où <replaceable class="parameter">contrainte</replaceable> est&nbsp;:</phrase>

[ CONSTRAINT <replaceable class="parameter">nom_contrainte</replaceable> ]
{ NOT NULL | NULL | CHECK (<replaceable class="parameter">expression</replaceable>) }
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-createdomain">
   <primary>CREATE DOMAIN</primary>
  </indexterm>

  <para>
   <command>CREATE DOMAIN</command> crée un nouveau domaine. Un domaine est
   essentiellement un type de données avec des contraintes optionnelles
   (restrictions sur l'ensemble de valeurs autorisées). L'utilisateur qui
   définit un domaine devient son propriétaire.
  </para>

  <para>
   Si un nom de schéma est donné (par exemple, <literal>CREATE DOMAIN
   monschema.mondomaine ...</literal>), alors le domaine est créé dans le schéma
   spécifié. Sinon, il est créé dans le schéma courant. Le nom du domaine doit
   être unique parmi les types et domaines existant dans son schéma.
  </para>

  <para>
   Les domaines permettent d'extraire des contraintes communes à plusieurs tables 
   et de les regrouper en un seul emplacement, ce qui en facilite la maintenance.
   Par exemple, plusieurs tables pourraient contenir des colonnes d'adresses
   email, toutes nécessitant la même contrainte de vérification (CHECK) permettant
   de vérifier que le contenu de la colonne est bien une adresse email. Définissez
   un domaine plutôt que de configurer la contrainte individuellement sur chaque
   table.
  </para>

  <para>
   Pour pouvoir créer un domaine, vous devez avoir le droit <literal>USAGE</literal>
   sur le type sous-jacent.
  </para>

 </refsect1>

 <refsect1>
  <title>Paramètres</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">nom</replaceable></term>
      <listitem>
       <para>
	Le nom du domaine à créer (éventuellement qualifié du nom du schéma).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">type_donnees</replaceable></term>
      <listitem>
       <para>
        Le type de données sous-jacent au domaine. Il peut contenir des
        spécifications de tableau.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>collation</replaceable></term>
      <listitem>
       <para>
        Un collationement optionnel pour le domaine. Si aucun collationnement
        n'est spécifié, le collationnement utilisé par défaut est celui du
        type de données. Le type doit être collationnable si
        <literal>COLLATE</literal> est spécifié.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>DEFAULT <replaceable>expression</replaceable></literal></term>

      <listitem>
       <para>
        La clause <literal>DEFAULT</literal> permet de définir une valeur par défaut pour les
        colonnes d'un type de données du domaine. La valeur est une expression quelconque
	sans variable (les sous-requêtes ne sont pas autorisées).
        Le type de données de l'expression par défaut doit correspondre à celui
        du domaine. Si la valeur par défaut n'est pas indiquée, alors
        il s'agit de la valeur NULL.
       </para>

       <para>
        L'expression par défaut est utilisée dans toute opération
        d'insertion qui ne spécifie pas de valeur pour cette colonne. Si une
        valeur par défaut est définie sur une colonne particulière, elle
        surcharge toute valeur par défaut du domaine. De même,
        la valeur par défaut surcharge toute valeur par défaut associée au
        type de données sous-jacent.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CONSTRAINT <replaceable
       class="parameter">nom_contrainte</replaceable></literal></term>
      <listitem>
       <para>
        Un nom optionnel pour une contrainte. S'il n'est pas spécifié, le système en
        engendre un.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NOT NULL</literal></term>
      <listitem>
       <para>
        Les valeurs de ce domaine sont habituellement protégées comme les
        valeurs NULL. Néanmoins, il est toujours possible qu'un domaine avec
        cette contrainte prenne une valeur NULL s'il se voit affecté un type
        de domaine qui est devenu NULL, par exemple via une jointure LEFT
        OUTER JOIN ou une requête du type <command>INSERT INTO tab
        (colonne_domaine) VALUES ((SELECT colonne_domaine FROM tab WHERE
        false))</command>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULL</literal></term>
      <listitem>
       <para>
        Les valeurs de ce domaine peuvent être NULL. C'est la valeur par défaut.
       </para>

       <para>
        Cette clause a pour seul but la compatibilité avec les bases de
        données SQL non standard. Son utilisation est découragée dans les
        applications nouvelles.
       </para>
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>CHECK (<replaceable class="parameter">expression</replaceable>)</literal></term>
    <listitem>
     <para>
      Les clauses <literal>CHECK</literal> spécifient des contraintes d'intégrité ou
      des tests que les valeurs du domaine doivent satisfaire. Chaque
      contrainte doit être une expression produisant un résultat booléen. 
      <literal>VALUE</literal> est obligatoirement utilisé pour se référer à la valeur
      testée.
     </para>

     <para>
      Actuellement, les expressions <literal>CHECK</literal> ne peuvent ni
      contenir de sous-requêtes ni se référer à des variables autres que
      <literal>VALUE</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Créer le type de données <type>code_postal_us</type>, et
   l'utiliser dans la définition d'une table. Un test d'expression rationnelle
   est utilisé pour vérifier que la valeur ressemble à un code postal US valide&nbsp;:

<programlisting>CREATE DOMAIN code_postal_us AS TEXT
CHECK(
   VALUE ~ '^\d{5}$'
OR VALUE ~ '^\d{5}-\d{4}$'
);

CREATE TABLE courrier_us (
  id_adresse SERIAL PRIMARY KEY,
  rue1 TEXT NOT NULL,
  rue2 TEXT,
  rue3 TEXT,
  ville TEXT NOT NULL,
  code_postal code_postal_us NOT NULL
);
</programlisting>
  </para>
 </refsect1>

 <refsect1 id="sql-createdomain-compatibility">
  <title>Compatibilité</title>

  <para>
   La commande <command>CREATE DOMAIN</command> est conforme au standard SQL.
  </para>
 </refsect1>

 <refsect1 id="sql-createdomain-see-also">
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterdomain"/></member>
   <member><xref linkend="sql-dropdomain"/></member>
  </simplelist>
 </refsect1>

</refentry>
