<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060618 -->

<refentry id="sql-createview">
 <refmeta>
  <refentrytitle>CREATE VIEW</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE VIEW</refname>
  <refpurpose>Définir une vue</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>CREATE [ OR REPLACE ] [ TEMP | TEMPORARY ] VIEW <replaceable class="parameter">nom</replaceable> [ ( <replaceable class="parameter">nom_colonne</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="PARAMETER">view_option_name</replaceable> [= <replaceable class="PARAMETER">view_option_value</replaceable>] [, ... ] ) ]
    AS <replaceable class="parameter">requête</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-createview">
   <primary>CREATE VIEW</primary>
  </indexterm>

  <para>
   <command>CREATE VIEW</command> définit une vue d'après une requête. La
   vue n'est pas matérialisée physiquement. Au lieu de cela, la requête
   est lancée chaque fois qu'une vue est utilisée dans une requête.
  </para>

  <para>
   <command>CREATE OR REPLACE VIEW</command> a la même finalité, mais
   si une vue du même nom existe déjà, elle est remplacée. La nouvelle requête
   doit générer les mêmes colonnes que celles de l'ancienne requête (c-est-à-dire
   les mêmes noms de colonnes dans le même ordre avec les mêmes types de données).
   Par contre, elle peut ajouter des colonnes supplémentaires en fin de liste.
   Les traitements qui donnent les colonnes en sortie pourraient être complètement
   différents.
  </para>

  <para>
   Si un nom de schéma est donné (par exemple
   <literal>CREATE VIEW monschema.mavue ...</literal>),
   alors la vue est créée dans ce schéma.
   Dans le cas contraire, elle est créée dans le schéma courant. Les vues
   temporaires existent dans un schéma spécial. Il n'est donc pas nécessaire
   de fournir de schéma pour les vues temporaires. Le
   nom de la vue doit être différent du nom de toute autre vue, table, séquence,
   index ou table distante du même schéma.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>TEMPORARY</literal> ou <literal>TEMP</literal></term>
    <listitem>
     <para>
      La vue est temporaire. Les vues temporaires sont automatiquement supprimées
	  en fin de session. Les relations permanentes qui portent le même nom ne sont plus
      visibles pour la session tant que la vue temporaire existe, sauf
      s'il y est fait référence avec le nom du schéma.
     </para>

     <para>
      Si l'une des tables référencées par la vue est temporaire, la vue est alors elle-aussi
      temporaire (que <literal>TEMPORARY</literal> soit spécifié ou non).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
       Le nom de la vue à créer (éventuellement qualifié du nom du schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom de colonne</replaceable></term>
    <listitem>
     <para>
      Une liste optionnelle de noms à utiliser pour les colonnes de la vue.
      Si elle n'est pas donnée, le nom des colonnes est déduit de la requête.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="PARAMETER">view_option_name</replaceable> [= <replaceable class="PARAMETER">view_option_value</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
      This clause specifies optional parameters for a view; currently, the
      only supported parameter name is <literal>security_barrier</literal>,
      which should be enabled when a view is intended to provide row-level
      security.  See <xref linkend="rules-privileges"/> for full details.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">requête</replaceable></term>
    <listitem>
     <para>
      Une commande <xref linkend="sql-select"/> ou
      <xref linkend="sql-values"/> qui fournira
      les colonnes et lignes de la vue.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

   <para>
    Actuellement, les vues sont en lecture seule&nbsp;: le système n'autorise
    pas une insertion, une mise à jour ou une suppression sur une vue.
	Les effets d'une vue actualisable peuvent être reproduits par la création
    de règles de réécriture des insertions, suppressions, mises à jour, etc. sur la vue en actions
    appropriées sur les autres tables. 
	<xref linkend="sql-createrule"/>
	présente des informations utiles à ce propos.
   </para>

   <para>
    L'instruction <xref linkend="sql-dropview"/>
	est utilisée pour supprimer les vues.
   </para>

   <para>
	Il est important de s'assurer que le nom et le type des colonnes de la vue
	correspondent à ce qui est souhaité. Ainsi&nbsp;:
<programlisting>CREATE VIEW vista AS SELECT 'Hello World';
</programlisting>
    présente deux défauts majeurs&nbsp;: le nom de la colonne prend la valeur implicite
	<literal>?column?</literal> et son type de données le type implicite <type>unknown</type>.
	Pour obtenir une chaîne de caractères dans le résultat de la vue, on peut écrire&nbsp;:
<programlisting>CREATE VIEW vista AS SELECT text 'Hello World' AS hello;
</programlisting>
   </para>

   <para>
    L'accès aux tables référencées dans la vue est déterminé par les droits
    du propriétaire de la vue. Dans certains cas, cela peut être utilisé pour
    fournir un accès sécurisé. Cependant, toutes les vues ne sont pas
    sécurisables&nbsp;; voir <xref linkend="rules-privileges"/> pour des
    détails.  Les fonctions appelées dans la vue sont traitées de la même façon
    que si elles avaient été appelées directement dans la requête utilisant la
    vue. Du coup, l'utilisateur d'une vue doit avoir les droits pour appeler
    toutes les fonctions utilisées par la vue.
   </para>

   <para>
    Quand <command>CREATE OR REPLACE VIEW</command> est utilisé sur une vue
    existante, seule la règle SELECT définissant la vue est modifiée. Les
    autres propriétés, comme les droits, le propriétaire et les règles autres
    que le SELECT, ne sont pas modifiées. Vous devez être le propriétaire de
    la vue pour la remplacer (ceci incluant aussi les membres du rôle
    propriétaire).
   </para>

 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Créer une vue composée des comédies&nbsp;:

<programlisting>CREATE VIEW comedies AS
    SELECT *
    FROM films
    WHERE genre = 'Comédie';
</programlisting>
   Cette requête crée une vue contenant les colonnes de la table
   <literal>film</literal> au moment de la création de la vue. Bien que l'étoile
   (<literal>*</literal>) soit utilisée pour créer la vue, les colonnes
   ajoutées par la suite à la table <literal>film</literal> ne feront pas
   partie de la vue.
  </para>
 </refsect1>
 
 <refsect1>
  <title>Compatibilité</title>

  <para>
   Le standard SQL spécifie quelques possibilités supplémentaires pour
   l'instruction <command>CREATE VIEW</command>&nbsp;:
<synopsis>CREATE VIEW <replaceable class="parameter">nom</replaceable> [ ( <replaceable class="parameter">nom_colonne</replaceable> [, ...] ) ]
    AS <replaceable class="parameter">requête</replaceable>
    [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]
</synopsis>
  </para>

  <para>
   Les clauses optionnelles de la commande SQL complète sont&nbsp;:

   <variablelist>
     <varlistentry>
      <term><literal>CHECK OPTION</literal></term>
      <listitem>
       <para>
        Cette option concerne les vues actualisables.
        Toutes les commandes <command>INSERT</command> et <command>UPDATE</command>
        appliquées à la vue sont contrôlées pour s'assurer que les données
        satisfont les conditions de définition de la vue
        (les nouvelles données sont visibles au travers de la vue). 
		Si ce n'est pas le cas, la mise à jour est rejetée.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>LOCAL</literal></term>
      <listitem>
       <para>
        Contrôle d'intégrité de la vue.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CASCADED</literal></term>
      <listitem>
       <para>
        Contrôle d'intégrité de la vue et de toutes les
        vues dépendantes. <literal>CASCADED</literal> est implicite si
        ni <literal>CASCADED</literal> ni <literal>LOCAL</literal> ne sont
        précisés.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>

  <para>
   <command>CREATE OR REPLACE VIEW</command> est une extension
   <productname>PostgreSQL</productname>, tout comme le concept de vue temporaire.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterview"/></member>
   <member><xref linkend="sql-dropview"/></member>
  </simplelist>
 </refsect1>
</refentry>
