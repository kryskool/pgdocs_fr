<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060619 -->

<refentry id="sql-explain">
 <refmeta>
  <refentrytitle>EXPLAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>EXPLAIN</refname>
  <refpurpose>Afficher le plan d'exécution d'une instruction</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>EXPLAIN [ ( <replaceable class="parameter">option</replaceable> [, ...] ) ] <replaceable class="parameter">instruction</replaceable>
EXPLAIN [ ANALYZE ] [ VERBOSE ] <replaceable class="parameter">instruction</replaceable>

<phrase>où <replaceable class="parameter">option</replaceable> est&nbsp;:</phrase>

    ANALYZE [ <replaceable class="parameter">boolean</replaceable> ]
    VERBOSE [ <replaceable class="parameter">boolean</replaceable> ]
    COSTS [ <replaceable class="parameter">boolean</replaceable> ]
    BUFFERS [ <replaceable class="parameter">boolean</replaceable> ]
    TIMING [ <replaceable class="parameter">boolean</replaceable> ]
    FORMAT { TEXT | XML | JSON | YAML }

</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-explain">
   <primary>EXPLAIN</primary>
  </indexterm>

  <indexterm zone="sql-explain">
   <primary>instructions préparées</primary>
   <secondary>afficher le plan de requête</secondary>
  </indexterm>

  <indexterm zone="sql-explain">
   <primary>curseur</primary>
   <secondary>afficher le plan de requête</secondary>
  </indexterm>

  <para>
   Cette commande affiche le plan d'exécution que l'optimiseur
   de <productname>PostgreSQL</productname> engendre pour l'instruction fournie. 
   Le plan d'exécution décrit le parcours de la (des) table(s) utilisée(s) dans
   la requête &mdash; parcours séquentiel, parcours d'index, etc. &mdash;.
   Si plusieurs tables sont référencées, il présente également les algorithmes
   de jointures utilisés pour rassembler les lignes issues des différentes
   tables.
  </para>

  <para>
   La partie la plus importante de l'affichage concerne l'affichage des coûts 
   estimés d'exécution. Ils représentent l'estimation faite par le planificateur
   des temps d'exécution de la requête (measured in cost units that are arbitrary, but conventionally
   mean disk page fetches).
   Deux nombres sont affichés&nbsp;: le coût de démarrage, écoulé avant que la première
   ligne soit renvoyée, et le coût d'exécution total, nécessaire au renvoi
   de toutes les lignes.
   Pour la plupart des requêtes, le coût qui importe est celui d'exécution totale. 
   Mais dans certains cas, tel que pour une sous-requête dans la clause
   <literal>EXISTS</literal>, le planificateur choisira le coût de démarrage le 
   plus court, et non celui d'exécution totale (car, de toute façon, l'exécuteur
   s'arrête après la récupération d'une ligne).
   De même, lors de la limitation des résultats à retourner par une
   clause <literal>LIMIT</literal>, la planificateur effectue une interpolation
   entre les deux coûts limites pour choisir le plan réellement le moins coûteux.
  </para>

  <para>
   L'option <literal>ANALYZE</literal> impose l'exécution de la requête en plus de 
   sa planification. Then actual runtime statistics are added to
   the display, including the total elapsed time expended within each plan
   node (in milliseconds) and the total number of rows it actually returned.
   C'est utile pour vérifier la véracité des informations fournies par le planificateur.
  </para>

  <important>
   <para>
    Il ne faut pas oublier que l'instruction est réellement exécutée avec l'option
    <literal>ANALYZE</literal>. 
    Bien qu'<command>EXPLAIN</command> inhibe l'affichage des retours d'une
    commande <command>SELECT</command>, les autres effets 
    de l'instruction sont présents. Si <command>EXPLAIN ANALYZE</command> 
    doit être utilisé sur une instruction
    <command>INSERT</command>, <command>UPDATE</command>,
    <command>DELETE</command> <command>CREATE TABLE AS</command> ou
    <command>EXECUTE</command> sans que la commande
    n'affecte les données, l'approche suivante peut être envisagée&nbsp;:
<programlisting>BEGIN;
EXPLAIN ANALYZE ...;
ROLLBACK;
</programlisting>
   </para>

  <para>
   Seules les options <literal>ANALYZE</literal> et <literal>VERBOSE</literal>
   peuvent être utilisées et dans cet ordre seulement si la liste d'options
   entre parenthèses n'est pas utilisé. Avant
   <productname>PostgreSQL</productname> 9.0, la seule syntaxe supportée était
   celle sans parenthèses. Les nouvelles options ne seront supportées que par
   la nouvelle syntaxe, celle avec les parenthèses.
  </para>
  </important>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>ANALYZE</literal></term>
    <listitem>
     <para>
      Exécute la commande et affiche les temps d'exécution réels et d'autres
      statistiques. Ce paramètre est par défaut à <literal>FALSE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VERBOSE</literal></term>
    <listitem>
     <para>
      Affiche des informations supplémentaires sur le plan. Cela inclut la
      liste des colonnes en sortie pour chaque n&oelig;ud du plan, les noms
      des tables et fonctions avec le nom du schéma, les labels des variables
      dans les expressions avec des alias de tables et le nom de chaque trigger
      pour lesquels les statistiques sont affichées. Ce paramètre est par
      défaut à <literal>FALSE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>COSTS</literal></term>
    <listitem>
     <para>
      Inclut des informations sur le coût estimé au démarrage et au total de
      chaque n&oelig;ud du plan, ainsi que le nombre estimé de lignes et la
      largeur estimée de chaque ligne. Ce paramètre est par défaut à
      <literal>TRUE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BUFFERS</literal></term>
    <listitem>
     <para>
       Include information on buffer usage. Specifically, include the number of
      shared blocks hit, read, dirtied, and written, the number of local blocks
      hit, read, dirtied, and written, and the number of temp blocks read and
      written.
      A <emphasis>hit</emphasis> means that a read was avoided because the block was
      found already in cache when needed.
      Shared blocks contain data from regular tables and indexes;
      local blocks contain data from temporary tables and indexes;
      while temp blocks contain short-term working data used in sorts, hashes,
      Materialize plan nodes, and similar cases.
      The number of blocks <emphasis>dirtied</emphasis> indicates the number of
      previously unmodified blocks that were changed by this query; while the
      number of blocks <emphasis>written</emphasis> indicates the number of
      previously-dirtied blocks evicted from cache by this backend during
      query processing.
      The number of blocks shown for an
       upper-level node includes those used by all its child nodes.  In text
       format, only non-zero values are printed.  This parameter may only be
      used when <literal>ANALYZE</literal> is also enabled.  It defaults to
       <literal>FALSE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TIMING</literal></term>
    <listitem>
     <para>
      Include the actual startup time and time spent in the node in the output.
      The overhead of repeatedly reading the system clock can slow down the
      query significantly on some systems, so it may be useful to set this
      parameter to <literal>FALSE</literal> when only actual row counts, and not
      exact times, are needed.
      This parameter may only be used when <literal>ANALYZE</literal> is also
      enabled.  It defaults to <literal>TRUE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FORMAT</literal></term>
    <listitem>
     <para>
      Indique le format de sortie. Il peut valoir TEXT, XML, JSON ou YAML.
      Toutes les sorties contiennent les mêmes informations, mais les
      programmes pourront plus facilement traiter les sorties autres que TEXT.
      Ce paramètre est par défaut à <literal>TEXT</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">boolean</replaceable></term>
    <listitem>
     <para>
      Spécifie si l'option sélectionnée doit être activée ou désactivée. Vous
      pouvez écrire <literal>TRUE</literal>, <literal>ON</literal> ou
      <literal>1</literal> pour activer l'option, et <literal>FALSE</literal>,
      <literal>OFF</literal> ou <literal>0</literal> pour la désactiver. La
      valeur de type <replaceable class="parameter">boolean</replaceable> peut
      aussi être omise, auquel cas la valeur sera <literal>TRUE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">instruction</replaceable></term>
    <listitem>
     <para>
      Toute instruction <command>SELECT</command>, <command>INSERT</command>,
      <command>UPDATE</command>, <command>DELETE</command>, <command>VALUES</command>
      <command>EXECUTE</command>, <command>DECLARE</command> ou
      <command>CREATE TABLE AS</command> dont le plan
      d'exécution est souhaité.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Outputs</title>
 
   <para>
    The command's result is a textual description of the plan selected
    for the <replaceable class="parameter">statement</replaceable>,
    optionally annotated with execution statistics.
    <xref linkend="using-explain"/> describes the information provided.
   </para>
 </refsect1>

 <refsect1>
  <title>Notes</title>
 
   <para>
    In order to allow the <productname>PostgreSQL</productname> query
    planner to make reasonably informed decisions when optimizing
   queries, the <link
   linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>
   data should be up-to-date for all tables used in the query.  Normally
   the <link linkend="autovacuum">autovacuum daemon</link> will take care
   of that automatically.  But if a table has recently had substantial
   changes in its contents, you might need to do a manual
   <xref linkend="sql-analyze"/> rather than wait for autovacuum to catch up
   with the changes.
   </para>
 
   <para>
    In order to measure the run-time cost of each node in the execution
    plan, the current implementation of <command>EXPLAIN
   ANALYZE</command> adds profiling overhead to query execution.
   As a result, running <command>EXPLAIN ANALYZE</command>
    on a query can sometimes take significantly longer than executing
    the query normally. The amount of overhead depends on the nature of
   the query, as well as the platform being used.  The worst case occurs
   for plan nodes that in themselves require very little time per
   execution, and on machines that have relatively slow operating
   system calls for obtaining the time of day.
   </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Afficher le plan d'une requête simple sur une table d'une seule
   colonne de type <type>integer</type> et 10000 lignes&nbsp;:

<programlisting>EXPLAIN SELECT * FROM foo;

                       QUERY PLAN
---------------------------------------------------------
 Seq Scan on foo  (cost=0.00..155.00 rows=10000 width=4)
(1 row)
</programlisting>
  </para>

  <para>
   Voici le même plan, mais formaté avec JSON&nbsp;:
<programlisting>EXPLAIN (FORMAT JSON) SELECT * FROM foo;
           QUERY PLAN           
--------------------------------
 [                             +
   {                           +
     "Plan": {                 +
       "Node Type": "Seq Scan",+
       "Relation Name": "foo", +
       "Alias": "foo",         +
       "Startup Cost": 0.00,   +
       "Total Cost": 155.00,   +
       "Plan Rows": 10000,     +
       "Plan Width": 4         +
     }                         +
   }                           +
 ]
(1 row)
</programlisting>
  </para>

  <para>
   S'il existe un index et que la requête contient une condition
   <literal>WHERE</literal> indexable, <command>EXPLAIN</command> peut
   afficher un plan différent&nbsp;:

<programlisting>EXPLAIN SELECT * FROM foo WHERE i = 4;

                         QUERY PLAN
--------------------------------------------------------------
 Index Scan using fi on foo  (cost=0.00..5.98 rows=1 width=4)
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>

  <para>
   Voici le même plan, mais formaté avec YAML&nbsp;:
<programlisting>
EXPLAIN (FORMAT YAML) SELECT * FROM foo WHERE i='4';
          QUERY PLAN           
-------------------------------
 - Plan:                      +
     Node Type: "Index Scan"  +
     Scan Direction: "Forward"+
     Index Name: "fi"         +
     Relation Name: "foo"     +
     Alias: "foo"             +
     Startup Cost: 0.00       +
     Total Cost: 5.98         +
     Plan Rows: 1             +
     Plan Width: 4            +
     Index Cond: "(i = 4)"
(1 row)
</programlisting>

    L'obtention du format XML est laissé en exercice au lecteur.
  </para>
  <para>
   Voici le même plan avec les coûts supprimés&nbsp;:

<programlisting>
EXPLAIN (COSTS FALSE) SELECT * FROM foo WHERE i = 4;

        QUERY PLAN
----------------------------
 Index Scan using fi on foo
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>

  <para>
   Exemple de plan de requête pour une requête utilisant une
   fonction d'agrégat&nbsp;:

<programlisting>EXPLAIN SELECT sum(i) FROM foo WHERE i &lt; 10;

                             QUERY PLAN
---------------------------------------------------------------------
 Aggregate  (cost=23.93..23.93 rows=1 width=4)
   -&gt;  Index Scan using fi on foo  (cost=0.00..23.92 rows=6 width=4)
         Index Cond: (i &lt; 10)
(3 rows)
</programlisting>
  </para>

  <para>
   Exemple d'utilisation de <command>EXPLAIN EXECUTE</command> pour
   afficher le plan d'exécution d'une requête préparée&nbsp;:

<programlisting>PREPARE query(int, int) AS SELECT sum(bar) FROM test
    WHERE id &gt; $1 AND id &lt; $2
    GROUP BY foo;

EXPLAIN ANALYZE EXECUTE query(100, 200);

                                                       QUERY PLAN
-------------------------------------------------------------------------------------
 HashAggregate  (cost=39.53..39.53 rows=1 width=8) (actual time=0.661..0.672 rows=7 loops=1)
   -&gt;  Index Scan using test_pkey on test  (cost=0.00..32.97 rows=1311 width=8) (actual time=0.050..0.395 rows=99 loops=1)
         Index Cond: ((id &gt; $1) AND (id &lt; $2))
 Total runtime: 0.851 ms
(4 rows)
</programlisting>
  </para>
  <para>
   Il est évident que les nombres présentés ici dépendent du contenu
   effectif des tables impliquées. 
   De plus, les nombres, et la stratégie sélectionnée elle-même,
   peuvent différer en fonction de la version de <productname>PostgreSQL</productname>
   du fait des améliorations apportées au planificateur.
   Il faut également savoir que la commande <command>ANALYZE</command> calcule les statistiques
   des données à partir d'extraits aléatoires&nbsp;; il est de ce fait
   possible que les coûts estimés soient modifiés après l'exécution
   de cette commande, alors même la distribution réelle des données
   dans la table n'a pas changé.
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   L'instruction <command>EXPLAIN</command> n'est pas définie dans le
   standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-analyze"/></member>
  </simplelist>
 </refsect1>
</refentry>
